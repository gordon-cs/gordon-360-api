using Gordon360.Exceptions;
using Gordon360.Models.CCT;
using Gordon360.Models.CCT.Context;
using Gordon360.Models.ViewModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.Extensions.Azure;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;


namespace Gordon360.Services
{
    public class LostAndFoundService(CCTContext context) : ILostAndFoundService
    {
        /// <summary>
        /// Create a new missing item report, for the submitter in the details, or the authenticated user if that is null.
        /// </summary>
        /// <param name="reportDetails"></param>
        /// <param name="username"></param>
        /// <returns>Report ID - The ID of the report, generated by the database.</returns>
        /// <exception cref="ResourceCreationException"></exception>
        public int CreateMissingItemReport(MissingItemReportViewModel reportDetails, string username)
        {
            // By default, get the submitter's account from the report details passed by the frontend
            var account = context.ACCOUNT.FirstOrDefault(x => x.AD_Username == reportDetails.submitterUsername);

            // If that fails, use the account of the currently authenticated user
            if (account == null)
            {
                account = context.ACCOUNT.FirstOrDefault(x => x.AD_Username == username);
            }

            string idNum;

            if (account != null)
            {
                idNum = account.gordon_id;
            }
            else
            {
                throw new ResourceCreationException() { ExceptionMessage = "No account could be found for the user." };
            }

            // Create the new report using the supplied fields
            var newReportResults = context.MissingReports.Add(new MissingReports
            {
                submitterID = idNum,
                forGuest = reportDetails.forGuest,
                category = reportDetails.category,
                colors = string.Join(",", reportDetails.colors),
                brand = reportDetails.brand,
                description = reportDetails.description,
                locationLost = reportDetails.locationLost,
                stolen = reportDetails.stolen,
                stolenDesc = reportDetails.stolenDescription,
                dateLost = reportDetails.dateLost,
                dateCreated = reportDetails.dateCreated,
                status = reportDetails.status,
            });

            context.SaveChanges();

            if (newReportResults == null || newReportResults?.Entity?.ID == 0)
            {
                throw new ResourceCreationException() { ExceptionMessage = "The report could not be saved." };
            }

            // /If this report was submitted for a guest user.
            if (reportDetails.forGuest)
            {
                // Add a guest user to the db associated with this report
                var newGuest = context.GuestUsers.Add(new GuestUsers
                {
                    missingID = newReportResults.Entity.ID,
                    firstName = reportDetails.firstName,
                    lastName = reportDetails.lastName,
                    phoneNumber = reportDetails.phone, 
                    emailAddress = reportDetails.email,
                });

                context.SaveChanges();

                if (newGuest.Entity == null || newReportResults?.Entity?.ID == 0)
                {
                    throw new ResourceCreationException() { ExceptionMessage = "The user associated with this record could not be saved." };
                }
            }

            // Retrieve the application ID number of this new application
            int reportID = newReportResults.Entity.ID;

            return reportID;
        }

        /// <param name="id">The id</param>
        public int CreateActionTaken(int id, ActionsTakenViewModel ActionsTaken)
        {
            var account = context.ACCOUNT.FirstOrDefault(x => x.AD_Username == ActionsTaken.username);

            string idNum;

            if (account != null)
            {
                idNum = account.gordon_id;
            }
            else
            {
                throw new ResourceCreationException() { ExceptionMessage = "No account could be found for the user." };
            }

            var newActionTaken = context.ActionsTaken.Add(new ActionsTaken
            {
                missingID = id,
                action = ActionsTaken.action,
                actionNote = ActionsTaken.actionNote,
                actionDate = ActionsTaken.actionDate,
                submitterID = idNum
            });

            context.SaveChanges();

            if (newActionTaken == null || newActionTaken?.Entity?.ID == 0)
            {
                throw new ResourceCreationException() { ExceptionMessage = "The action could not be saved." };
            }

            int actionTakenID = newActionTaken.Entity.ID;

            return actionTakenID;
        }

        /// <summary>
        /// Update a report with given id, to the given report detail data.
        ///    NOTE: cannot update associated guest user, if this report is for guest.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="reportDetails"></param>
        /// <returns></returns>
        /// <exception cref="ResourceNotFoundException"></exception>
        public async Task UpdateMissingItemReportAsync(int id, MissingItemReportViewModel reportDetails)
        {
            var original = await context.MissingReports.FindAsync(id);

            if (original != null)
            {
                original.category = reportDetails.category;
                original.colors = string.Join(",", reportDetails.colors);
                original.brand = reportDetails.brand;
                original.description = reportDetails.description;
                original.locationLost = reportDetails.locationLost;
                original.stolen = reportDetails.stolen;
                original.stolenDesc = reportDetails.stolenDescription;
                original.dateLost = reportDetails.dateLost;
                original.dateCreated = reportDetails.dateCreated;
                original.status = reportDetails.status;

                await context.SaveChangesAsync();
            }
            else
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "The Missing Item Report was not found" };
            }
        }

        /// <summary>
        /// Update the status of a report with given id, to the given status message
        ///     Status text must be in the set of allowed statuses, "Active", "Expired", "Deleted", "Found"
        /// </summary>
        /// <param name="id"></param>
        /// <param name="status"></param>
        /// <returns>None</returns>
        /// <exception cref="ResourceNotFoundException"></exception>
        public async Task UpdateReportStatusAsync(int id, string status)
        {
            var original = await context.MissingReports.FindAsync(id);

            if (original != null)
            {
                original.status = status;

                await context.SaveChangesAsync();
            }
            else
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "The Missing Item Report was not found" };
            }
        }

        /// <summary>
        /// Get the list of missing item reports for given user.
        /// </summary>
        /// <param name="username">The username to get reports for</param>
        /// <returns>an Enumerable of Missing Item Reports containing all missing item reports</returns>
        public IEnumerable<MissingItemReportViewModel> GetMissingItems(string username)
        {
            // Get the account of the given username.
            var account = context.ACCOUNT.FirstOrDefault(x => x.AD_Username == username);

            string idNum;

            if (account != null)
            {
                idNum = account.gordon_id;
            }
            else
            {
                throw new ResourceCreationException() { ExceptionMessage = "No account could be found for the usename." };
            }
            // Fetch the missing item reports belonging to that user, and not submitted for someone else
            IEnumerable<MissingItemData> missingList = context.MissingItemData.Where(x => x.submitterID == idNum && x.forGuest == false);
            // Convert the report objects into viewmodel objects.
            IEnumerable<MissingItemReportViewModel> returnList = missingList.Select(x => (MissingItemReportViewModel)x);
            return returnList;
        }

        /// <summary>
        /// Get all missing item reports
        /// </summary>
        /// <returns>An enumerable of Missing Item Reports, from the Missing Item Data view</returns>
        public IEnumerable<MissingItemReportViewModel> GetMissingItemsAll()
        {
            IEnumerable<MissingItemData> missingList = context.MissingItemData.AsEnumerable();
            return missingList.Select(x => (MissingItemReportViewModel)x);
        }

        /// <summary>
        /// Gets a Missing by id, only allowed if it belongs to the username, or the user is an admin
        /// </summary>
        /// <param name="id">The ID of the missing item</param>
        /// <param name="username">The username of the person requesting the data</param>
        /// <returns>A Missing Item Report object, or null if no item matches the id</returns>
        public MissingItemReportViewModel? GetMissingItem(int id, string username)
        {
            MissingItemData report;
            // If user is admin, simply get the report
            if (Authorization.AuthUtils.GetGroups(username).Contains(Enums.AuthGroup.LostAndFoundAdmin))
            {
                report = context.MissingItemData.FirstOrDefault(x => x.ID == id);
            }
            else
            {
                // Otherwise check if the report belongs to the requesting user
                var idNum = context.ACCOUNT.FirstOrDefault(x => x.AD_Username == username).gordon_id;
                report = context.MissingItemData.FirstOrDefault(x => x.ID == id && x.submitterID == idNum);
            }
            return (MissingItemReportViewModel)report;
        }

        /// <summary>
        /// Gets a list of Actions Taken by id
        /// </summary>
        /// <param name="id">The ID of the associated missing item report</param>
        /// <returns>An ActionsTaken, or null if no item matches the id</returns>
        public IEnumerable<ActionsTakenViewModel> GetActionsTaken(int id)
        {   
            IEnumerable<ActionsTaken> actionsList = context.ActionsTaken.Where(x => x.missingID == id);

            // Create a list of usernames based on the submitter ID
            List<string> usernameList = [];
            foreach (ActionsTaken element in actionsList)
            {
                var submitter_id = context.ACCOUNT.FirstOrDefault(x => x.gordon_id == element.submitterID);

                string username;

                if (submitter_id != null)
                {
                    username = submitter_id.AD_Username;
                    usernameList.Add(username);
                }
                else
                {
                    throw new ResourceCreationException() { ExceptionMessage = "No username could be found for the user." };
                }
            }

            // Type cast to Actions Taken View Model 
            IEnumerable<ActionsTakenViewModel> returnList = actionsList.Select(x => (ActionsTakenViewModel)x);

            // Create an Enumerator for the username list
            IEnumerator<string> usernameEnumerator = usernameList.GetEnumerator();

            // For each action taken in returnList, update the username based on the username list enumerator
            returnList = returnList.Select(x => { usernameEnumerator.MoveNext(); x.username = usernameEnumerator.Current; return x; });

            return returnList;
        }
    }
}
