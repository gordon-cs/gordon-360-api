using Gordon360.Exceptions;
using Gordon360.Models.CCT;
using Gordon360.Models.CCT.Context;
using Gordon360.Models.ViewModels;
using Microsoft.EntityFrameworkCore;
using Serilog;
using System;
using System.Collections.Generic;
using System.DirectoryServices.AccountManagement;
using System.Linq;
using System.Threading.Tasks;


namespace Gordon360.Services
{
    public class LostAndFoundService(CCTContext context, IAccountService accountService) : ILostAndFoundService
    {
        /// <summary>
        /// Check if the user has full admin permissions in the system
        /// </summary>
        /// <param name="username">the UPN of the user</param>
        /// <returns>Boolean, whether the user has full admin permissions</returns>
        private bool hasFullPermissions(string username)
        {
            IEnumerable<Enums.AuthGroup> userGroups = Authorization.AuthUtils.GetGroups(username);
            bool isDev;
            bool isAdmin;

            // AD permission issues can, in rare cases, lead to errors enumerating userGroups:
            try
            {
                isDev = userGroups.Contains(Enums.AuthGroup.LostAndFoundDevelopers);
            }
            catch (NoMatchingPrincipalException e)
            {
                Log.Error("NoMatchingPrincipleException encountered and handled when searching for LostAndFoundDevelopers group on USER UPN " + username + " EXCEPTION: " + e);
                // If we fail to get the admin group, default to false.
                isDev = false;
            }
            try
            {
                isAdmin = userGroups.Contains(Enums.AuthGroup.LostAndFoundAdmin);
            }
            catch (NoMatchingPrincipalException e)
            {
                Log.Error("NoMatchingPrincipleException encountered and handled when searching for LostAndFoundAdmin group on USER UPN " + username + " EXCEPTION: " + e);
                // If we fail to get the admin group, default to false.
                isAdmin = false;
            }
            return (isAdmin || isDev);
        }

        /// <summary>
        /// Check if the user has kiosk permissions in the system
        /// </summary>
        /// <param name="username">the UPN of the user</param>
        /// <returns>Boolean, whether the user has kiosk permissions</returns>
        private bool hasKioskPermissions(string username)
        {
            IEnumerable<Enums.AuthGroup> userGroups = Authorization.AuthUtils.GetGroups(username);
            bool isKiosk;

            // AD permission issues can, in rare cases, lead to errors enumerating userGroups:
            try
            {
                isKiosk = userGroups.Contains(Enums.AuthGroup.LostAndFoundAssist);
            }
            catch (NoMatchingPrincipalException e)
            {
                Log.Error("NoMatchingPrincipleException encountered and handled when searching for LostAndFoundDevelopers group on USER UPN " + username + " EXCEPTION: " + e);
                // If we fail to get the admin group, default to false.
                isKiosk = false;
            }
            return isKiosk;
        }

        /// <summary>
        /// Create a new missing item report, for the submitter in the details, or the authenticated user if that is null.
        /// </summary>
        /// <param name="reportDetails"></param>
        /// <param name="username"></param>
        /// <returns>Report ID - The ID of the report, generated by the database.</returns>
        /// <exception cref="ResourceCreationException">If a general user attempts to create a report for someone else
        /// or the report can't be successfully saved</exception>
        public int CreateMissingItemReport(MissingItemReportViewModel reportDetails, string username)
        {
            // If a general user attempts to create a missing item report for someone else, or for a guest user
            if (!hasFullPermissions(username) && 
                !hasKioskPermissions(username) && 
                (reportDetails.submitterUsername.ToLower() != username.ToLower() || reportDetails.forGuest))
            {
                throw new ResourceCreationException() { ExceptionMessage = "Cannot create missing item report for someone else." };
            }

            // Get the id for the username submitted with the report object
            string idNum;
            if (reportDetails.submitterUsername != "")
            {
                // By default, try to get the account of the username in the
                idNum = accountService.GetAccountByUsername(reportDetails.submitterUsername).GordonID;
            }
            else
            {
                idNum = accountService.GetAccountByUsername(username).GordonID;
            }

            // Create the new report using the supplied fields
            var newReportResults = context.MissingReports.Add(new MissingReports
            {
                submitterID = idNum,
                forGuest = reportDetails.forGuest,
                category = reportDetails.category,
                colors = string.Join(",", reportDetails.colors),
                brand = reportDetails.brand,
                description = reportDetails.description,
                locationLost = reportDetails.locationLost,
                stolen = reportDetails.stolen,
                stolenDesc = reportDetails.stolenDescription,
                dateLost = reportDetails.dateLost,
                dateCreated = reportDetails.dateCreated,
                status = reportDetails.status,
            });

            context.SaveChanges();

            if (newReportResults == null || newReportResults?.Entity?.ID == 0)
            {
                throw new ResourceCreationException() { ExceptionMessage = "The report could not be saved." };
            }

            // /If this report was submitted for a guest user.
            if (reportDetails.forGuest)
            {
                // Add a guest user to the db associated with this report
                var newGuest = context.GuestUsers.Add(new GuestUsers
                {
                    missingID = newReportResults.Entity.ID,
                    firstName = reportDetails.firstName,
                    lastName = reportDetails.lastName,
                    phoneNumber = reportDetails.phone, 
                    emailAddress = reportDetails.email,
                });

                context.SaveChanges();

                if (newGuest.Entity == null || newReportResults?.Entity?.ID == 0)
                {
                    throw new ResourceCreationException() { ExceptionMessage = "The user associated with this record could not be saved." };
                }
            }

            // Retrieve the application ID number of this new application
            int reportID = newReportResults.Entity.ID;

            return reportID;
        }

        /// <summary>
        /// Create an action taken for the missing item report with given id
        /// </summary>
        /// <param name="missingItemID">The id of the missing item to add an action to</param>
        /// <param name="ActionsTaken">The actions taken object to create</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>actionTakenID - The ID of the action taken, generated by the database.</returns>
        /// <exception cref="ResourceCreationException">If the requesting users account can't be found, or the action fails to save</exception>
        /// <exception cref="ResourceNotFoundException">If no missing item report exists with the given id</exception>
        /// <exception cref="UnauthorizedAccessException">If a non-admin user attempts to create an action on a report which doesn't
        /// belong to them</exception>
        public int CreateActionTaken(int missingItemID, ActionsTakenViewModel ActionsTaken, string username)
        {
            // Get requesting user's ID number
            var idNum = accountService.GetAccountByUsername(username).GordonID;

            var missingItemReport = context.MissingReports.Find(missingItemID);
            if (missingItemReport == null)
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "No missing item report with given id found in the system" };
            }

            // If the reports does not belong to the user, and the user is not an admin
            if (missingItemReport.submitterID != idNum && !hasFullPermissions(username) && !hasKioskPermissions(username)) 
            {
                throw new UnauthorizedAccessException("Cannot modify a report that doesn't belong to you!");
            }

            var newActionTaken = context.ActionsTaken.Add(new ActionsTaken
            {
                missingID = missingItemID,
                action = ActionsTaken.action,
                actionNote = ActionsTaken.actionNote,
                actionDate = ActionsTaken.actionDate,
                submitterID = idNum,
                isPublic = ActionsTaken.isPublic,
            });

            context.SaveChanges();

            if (newActionTaken == null || newActionTaken?.Entity?.ID == 0)
            {
                throw new ResourceCreationException() { ExceptionMessage = "The action could not be saved." };
            }

            int actionTakenID = newActionTaken.Entity.ID;

            return actionTakenID;
        }

        /// <summary>
        /// Update a report with given id, to the given report detail data.
        ///    NOTE: cannot modify associated guest user data, if this report is for guest.
        /// </summary>
        /// <param name="missingItemID">The id of the missing item to modify</param>
        /// <param name="reportDetails">The new object to update to</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>None</returns>
        /// <exception cref="ResourceCreationException">If not account can be found for the requesting user</exception>
        /// <exception cref="ResourceNotFoundException">If the missing item report with given id cannot be found in the database</exception>
        /// <exception cref="UnauthorizedAccessException">If the report to be modified doesn't belong to the requesting user 
        /// (admins cannot edit reports of other people)</exception>
        public async Task UpdateMissingItemReportAsync(int missingItemID, MissingItemReportViewModel reportDetails, string username)
        {
            // Get requesting user's ID number
            var idNum = accountService.GetAccountByUsername(username).GordonID;

            var original = await context.MissingReports.FindAsync(missingItemID);

            if (original == null)
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "The Missing Item Report was not found" };
            }

            // If the report doesn't belong to the requesting user
            if (original.submitterID != idNum)
            {
                throw new UnauthorizedAccessException("Cannot modify a report that doesn't belong to you!");
            }

            original.category = reportDetails.category;
            original.colors = string.Join(",", reportDetails.colors);
            original.brand = reportDetails.brand;
            original.description = reportDetails.description;
            original.locationLost = reportDetails.locationLost;
            original.stolen = reportDetails.stolen;
            original.stolenDesc = reportDetails.stolenDescription;
            original.dateLost = reportDetails.dateLost;
            original.dateCreated = reportDetails.dateCreated;
            original.status = reportDetails.status;

            await context.SaveChangesAsync();
        }

        /// <summary>
        /// Update the status of a report with given id, to the given status message
        ///     Status text must be in the set of allowed statuses, "Active", "Expired", "Deleted", "Found"
        /// </summary>
        /// <param name="missingItemID">The id of the missing item to modify</param>
        /// <param name="status">The new status</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>None</returns>
        /// <exception cref="ResourceCreationException">If not account can be found for the requesting user</exception>
        /// <exception cref="ResourceNotFoundException">If the missing item report with given id cannot be found in the database</exception>
        /// <exception cref="UnauthorizedAccessException">If the report to be modified doesn't belong to the requesting user and the
        /// user is not an admin</exception>
        public async Task UpdateReportStatusAsync(int missingItemID, string status, string username)
        {
            // Get requesting user's ID number
            var idNum = accountService.GetAccountByUsername(username).GordonID;

            var original = await context.MissingReports.FindAsync(missingItemID);

            if (original == null)
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "The Missing Item Report was not found" };
            }
            
            // If a non-admin user attempts to update the status of a report
            if (original.submitterID != idNum && !hasFullPermissions(username))
            {
                throw new UnauthorizedAccessException("Cannot modify a report that doesn't belong to you!");
            }

            original.status = status;

            await context.SaveChangesAsync();
        }

        /// <summary>
        /// Get the list of missing item reports for given user.
        /// </summary>
        /// <param name="requestedUsername">The username to get the data of, if allowed</param>
        /// <param name="requestorUsername">The username of the person making the request</param>
        /// <returns>an Enumerable of Missing Item Reports containing all missing item reports</returns>
        /// <exception cref="ResourceNotFoundException">If a user requests reports they are not permitted to access</exception>
        public IEnumerable<MissingItemReportViewModel> GetMissingItems(string requestedUsername, string requestorUsername)
        {
            if (hasFullPermissions(requestorUsername))
            {
                // If this is an admin user, get the reports for the requested username
                return context.MissingItemData
               .Where(x => x.submitterUsername == requestedUsername && !x.forGuest)
               .GroupJoin(context.ActionsTakenData
               .Where(x => x.isPublic),
                   missingItem => missingItem.ID,
                   action => action.missingID,
                   (missingItem, action) => MissingItemReportViewModel.From(missingItem, action));
            }
            else
            {
                // If a non-admin user requests the reports of someone else
                if (!requestorUsername.Equals(requestedUsername, StringComparison.OrdinalIgnoreCase))
                {
                    throw new ResourceNotFoundException() { ExceptionMessage = "No missing item reports could be found" };
                }

                return context.MissingItemData
               .Where(x => x.submitterUsername == requestedUsername && !x.forGuest)
               .GroupJoin(context.ActionsTakenData
               .Where(x => x.isPublic),
                   missingItem => missingItem.ID,
                   action => action.missingID,
                   (missingItem, action) => MissingItemReportViewModel.From(missingItem, action));

            }
        }

        /// <summary>
        /// Get all missing item reports
        /// Throw unauthorized access exception if the user doesn't have admin permissions
        /// </summary>
        /// <param name="color">The selected color for filtering reports</param>
        /// <param name="category">The selected category for filtering reports</param>
        /// <param name="keywords">The selected keywords for filtering by keywords</param>
        /// <param name="status">The selected status for filtering reports</param>
        /// <param name="username">The username of the person making the request</param>
        /// <param name="lastId">The ID of the last fetched report to start from for pagination</param>
        /// <param name="pageSize">The size of the page to fetch for pagination</param>
        /// <returns>An enumerable of Missing Item Reports, from the Missing Item Data view</returns>
        /// <exception cref="UnauthorizedAccessException">If a user without admin permissions attempts to use</exception>
        public IEnumerable<MissingItemReportViewModel> GetMissingItemsAll(string username, 
                                                                          int? lastId, 
                                                                          int? pageSize, 
                                                                          string? status, 
                                                                          string? color, 
                                                                          string? category, 
                                                                          string? keywords)
        {
            if (!hasFullPermissions(username))
            {
                throw new UnauthorizedAccessException();
            }

            // Initialize database query to get all missing items ordered by date lost
            IQueryable<MissingItemData> missingItems = context.MissingItemData.OrderByDescending(item => item.ID);

            // Add filters to query based on provided filters
            if (status is not null)
            {
                missingItems = missingItems.Where(x => x.status == status);
            }
            if (color is not null)
            {
                missingItems = missingItems.Where(x => x.colors.Contains(color));
            }
            if (category is not null) 
            { 
                missingItems = missingItems.Where(x => x.category == category);
            }
            if (keywords is not null) 
            {
                missingItems = missingItems.Where(x => (x.firstName + " " + x.lastName).Contains(keywords)
                                                    || x.description.Contains(keywords) 
                                                    || x.locationLost.Contains(keywords));
            }

            // Finally paginate filtered reports, based on the last ID the frontend received, and the size of the page to get
            if (lastId is not null)
            {
                missingItems = missingItems.Where(item => item.ID < lastId);
            }
            if (pageSize is int pageLength)
            {
                missingItems = missingItems.Take(pageLength);
            }

            // Perform a group join to create a MissingItemReportViewModel with actions taken data for each report
            // Using a group join results in the use of a single SQL query to the db, so is much more performant than
            // alternative solutions.
            return missingItems
                      .GroupJoin(context.ActionsTakenData.OrderBy(action => action.actionDate),
                          missingItem => missingItem.ID,
                          action => action.missingID,
                          (missingItem, action) => MissingItemReportViewModel.From(missingItem, action));
        }

        /// <summary>
        /// Gets a Missing by id, only allowed if it belongs to the username, or the user is an admin
        /// </summary>
        /// <param name="missingItemID">The ID of the missing item</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>A Missing Item Report object, or null if no item matches the id</returns>
        /// <exception cref="ResourceNotFoundException">If the report with given ID doesn't exist or the user
        /// doesn't have permissions to read it</exception>
        public MissingItemReportViewModel? GetMissingItem(int missingItemID, string username)
        {
            MissingItemReportViewModel report;
            // If user is admin or developer, simply get the report
            if (hasFullPermissions(username))
            {
                var data = context.MissingItemData.FirstOrDefault(x => x.ID == missingItemID);
                if (data != null)
                {
                    report = (MissingItemReportViewModel)data;

                    // Get the list of all admin actions on this report, and add them to the report.
                    report.adminActions = GetActionsTaken(missingItemID, username, false, true);
                }
                else
                {
                    // If no such report exists
                    throw new ResourceNotFoundException();
                }
            }
            else
            {
                // Otherwise get the report if it belongs to the requesting user
                var data = context.MissingItemData.FirstOrDefault(x => x.ID == missingItemID && x.submitterUsername == username);
                if (data != null)
                {
                    report = (MissingItemReportViewModel)data;

                    // Get the list of public admin actions on this report, and add them to the report.
                    report.adminActions = GetActionsTaken(missingItemID, username, true);
                }
                else
                {
                    // If no such report exists
                    throw new ResourceNotFoundException();
                }
            }
            return report;
        }

        /// <summary>
        /// Gets a list of actions taken on a missing item report with given ID, 
        /// general users only allowed to get public actions on their own reports
        /// </summary>
        /// <param name="missingID">The ID of the missing item report to get the actions of</param>
        /// <param name="username">The username of the person making the request</param>
        /// <param name="getPublicOnly">Only get actions marked as public.  Default false.</param>
        /// <param name="elevatedPermissions">Signal to the function that user elevated authorization has already been confirmed</param>
        /// <returns>An ActionsTaken[], or null if no item matches the id</returns>
        /// <exception cref="ResourceNotFoundException">Attemps by a non-admin user to get actions for 
        /// a report which doesn't belong to them will yield an ResourceNotFoundException</exception>
        public IEnumerable<ActionsTakenViewModel> GetActionsTaken(int missingID, string username, bool getPublicOnly = false, bool elevatedPermissions = false)
        {
            // Ignore checking authorization if authorization is set (improved performance for large admin requests)
            if (!elevatedPermissions)
            {
                elevatedPermissions = hasFullPermissions(username);
            }

            // Get all actions taken for the report with given
            IQueryable<ActionsTakenData> actionsList = context.ActionsTakenData.Where(x => x.missingID == missingID);

            // If an admin requests only public actions
            if (elevatedPermissions && getPublicOnly)
            {
                actionsList = actionsList.Where(x => x.isPublic);
            }
            // Otherwise if a general user requests actions for a report
            else if (!elevatedPermissions)
            {
                // Check if the report belongs to them
                var missingReport = context.MissingItemData.FirstOrDefault(x => x.ID == missingID && x.submitterUsername.ToLower() == username.ToLower());
                if (missingReport != null)
                {
                    // If the missing item report exists (aka it belongs to them), get the public actions
                    actionsList = actionsList.Where(x => x.isPublic);
                }
                else
                {
                    // If the missing report doesn't belong to this user, short circuit and throw exception
                    throw new ResourceNotFoundException();
                }
            }

            // Typecast into the viewModel and return
            return actionsList.Select(x => (ActionsTakenViewModel)x);
        }

        /// <summary>
        /// Service method to retrieve counts of missing item reports.
        /// </summary>
        /// <param name="username"></param>
        /// <param name="status"></param>
        /// <param name="color"></param>
        /// <param name="category"></param>
        /// <param name="keywords"></param>
        /// <returns>Count of missing items after applying filters</returns>
        /// <exception cref="ResourceNotFoundException"></exception>
        public int GetMissingItemsCount(
             string username,
             string? status,
             string? color,
             string? category,
             string? keywords
         )
        {
            if (!hasFullPermissions(username))
            {
                throw new ResourceNotFoundException();
            }

            IQueryable<MissingItemData> query = context.MissingItemData;
            if (status is not null)
            {
                query = query.Where(x => x.status == status);
            }
            if (color is not null)
            {
                query = query.Where(x => x.colors.Contains(color));
            }
            if (category is not null)
            {
                query = query.Where(x => x.category == category);
            }
            if (keywords is not null)
            {
                query = query.Where(x =>
                    (x.firstName + " " + x.lastName).Contains(keywords) ||
                    x.description.Contains(keywords) ||
                    x.locationLost.Contains(keywords));
            }
            int filteredCount = query.Count();

            return filteredCount;
        }

        /// <summary>
        /// Create a new found item
        /// </summary>
        /// <param name="FoundItemDetails">The details of the report to create</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>String - The ID tag number of the created found item</returns>
        /// <exception cref="ResourceNotFoundException">Attemps by a non-admin user to create found items will
        /// throw a not found exception</exception>
        public string CreateFoundItem(FoundItemViewModel FoundItemDetails, string username)
        {
            if (!hasFullPermissions(username))
            {
                throw new ResourceNotFoundException();
            }

            // Get the id for the username submitted with the report object
            string idNum;
            if (FoundItemDetails.submitterUsername != "")
            {
                idNum = accountService.GetAccountByUsername(FoundItemDetails.submitterUsername).GordonID;
            }
            else
            {
                idNum = accountService.GetAccountByUsername(username).GordonID;
            }


            // Get user ID for a gordon finder, or create guest user entry for guest finder
            string? finderID = null;
            int? guestFinderID = null;
            if (FoundItemDetails.finderUsername != null)
            {
                finderID = accountService.GetAccountByUsername(FoundItemDetails.finderUsername).GordonID;
            }
            else if (FoundItemDetails.finderFirstName != null && FoundItemDetails.finderLastName != null)
            {
                var guestFinderResults = context.FoundGuest.Add(new FoundGuest
                {
                    firstName = FoundItemDetails.finderFirstName, 
                    lastName = FoundItemDetails.finderLastName,
                    phoneNumber = FoundItemDetails.finderPhone,
                    emailAddress = FoundItemDetails.finderEmail, 
                });

                context.SaveChanges();

                guestFinderID = guestFinderResults.Entity.ID;
            }

            // Get user ID for a gordon owner, or create guest user entry for guest owner
            string? ownerID = null;
            int? guestOwnerID = null;
            if (FoundItemDetails.ownerUsername != null)
            {
                ownerID = accountService.GetAccountByUsername(FoundItemDetails.ownerUsername).GordonID;
            }
            else if (FoundItemDetails.ownerFirstName != null && FoundItemDetails.ownerLastName != null)
            {
                var guestOwnerResults = context.FoundGuest.Add(new FoundGuest
                {
                    firstName = FoundItemDetails.ownerFirstName,
                    lastName = FoundItemDetails.ownerLastName,
                    phoneNumber = FoundItemDetails.ownerPhone,
                    emailAddress = FoundItemDetails.ownerEmail,
                });

                context.SaveChanges();

                guestOwnerID = guestOwnerResults.Entity.ID;
            }

            // Calculate new item ID for physical tag, based on current date and number of items created today
            string reportID = DateTime.Now.ToString("MMddyy") + "-";
            DateTime dateToday = DateTime.Now.Date;

            int numReportsToday = context.FoundItemData.Where(x => x.dateCreated == dateToday).Count();

            // Create the new report using the supplied fields
            var newReportResults = context.FoundItems.Add(new FoundItems
            {
                ID = reportID + (numReportsToday + 1),
                adminID = idNum,
                matchingMissingID = FoundItemDetails.matchingMissingID, 
                category = FoundItemDetails.category,
                colors = string.Join(",", FoundItemDetails.colors),
                brand = FoundItemDetails.brand,
                description = FoundItemDetails.description,
                locationFound = FoundItemDetails.locationFound,
                dateFound = FoundItemDetails.dateFound,
                dateCreated = DateTime.Now.Date,
                foundByID = finderID, 
                foundByGuestID = guestFinderID,
                finderWants = FoundItemDetails.finderWants,
                ownerID = ownerID,
                guestOwnerID = guestOwnerID,
                status = FoundItemDetails.status,
                storageLocation = FoundItemDetails.storageLocation,
            });

            context.SaveChanges();

            if (newReportResults == null)
            {
                throw new ResourceCreationException() { ExceptionMessage = "The report could not be saved." };
            }

            return reportID + (numReportsToday + 1);
        }


        /// Create an action taken for the found item report with given id
        /// </summary>
        /// <param name="foundItemId">The id of the found item to add an action to</param>
        /// <param name="FoundActionsTaken">The actions taken object to create</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns> foundActionTakenID - The ID of the action taken, generated by the database.</returns>
        /// <exception cref="ResourceCreationException">If the requesting users account can't be found, or the action fails to save</exception>
        /// <exception cref="ResourceNotFoundException">If no found item report exists with the given id or user does not have permission</exception>
        public int CreateFoundActionTaken(string foundItemId, FoundActionsTakenViewModel FoundActionsTaken, string username)
        {
            // Check if user has correct permissions
            if (!hasFullPermissions(username))
            {
                throw new ResourceNotFoundException();
            }

            // Get requesting user's ID number
            var idNum = accountService.GetAccountByUsername(username).GordonID;

            var foundItemReport = context.FoundItems.Find(foundItemId);
            if (foundItemReport == null)
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "No found item report with given id found in the system" };
            }

            var newFoundActionTaken = context.FoundActionsTaken.Add(new FoundActionsTaken
            {
                foundID = foundItemId,
                action = FoundActionsTaken.action,
                actionNote = FoundActionsTaken.actionNote,
                actionDate = FoundActionsTaken.actionDate,
                submitterId = idNum,
            });

            context.SaveChanges();

            if (newFoundActionTaken == null || newFoundActionTaken?.Entity?.ID == 0)
            {
                throw new ResourceCreationException() { ExceptionMessage = "The action could not be saved." };
            }

            int foundActionTakenID = newFoundActionTaken.Entity.ID;

            return foundActionTakenID;
        }

        /// <summary>
        /// Update a found item with given id, to the given report detail data.
        /// </summary>
        /// <param name="itemID">The id of the found item to modify</param>
        /// <param name="itemDetails">The new object to update to</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>None</returns>
        /// <exception cref="ResourceCreationException">If not account can be found for the requesting user</exception>
        /// <exception cref="ResourceNotFoundException">If the found item report with given id cannot be found in the database</exception>
        /// <exception cref="UnauthorizedAccessException">If the report to be modified doesn't belong to the requesting user</exception>
        public async Task UpdateFoundItemAsync(string itemID, FoundItemViewModel itemDetails, string username)
        {
            if (!hasFullPermissions(username))
            {
                throw new ResourceNotFoundException();
            }

            var original = await context.FoundItems.FindAsync(itemID);

            if (original == null)
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "The Found Item Report was not found" };
            }

            (int? guestFinderID, string? finderID) = FoundDataHelper(itemDetails.finderFirstName,
                            itemDetails.finderLastName,
                            itemDetails.finderPhone,
                            itemDetails.finderEmail,
                            itemDetails.finderUsername,
                            original.foundByGuestID);

            (int? guestOwnerID, string? ownerID) = FoundDataHelper(itemDetails.ownerFirstName,
                            itemDetails.ownerLastName,
                            itemDetails.ownerPhone,
                            itemDetails.ownerEmail,
                            itemDetails.ownerUsername,
                            original.guestOwnerID);

            original.matchingMissingID = itemDetails.matchingMissingID;
            original.category = itemDetails.category;
            original.colors = string.Join(",", itemDetails.colors);
            original.brand = itemDetails.brand;
            original.description = itemDetails.description;
            original.locationFound = itemDetails.locationFound;
            original.dateFound = itemDetails.dateFound;
            original.dateCreated = itemDetails.dateCreated;
            original.foundByID = finderID;
            original.foundByGuestID = guestFinderID;
            original.finderWants = itemDetails.finderWants;
            original.ownerID = ownerID;
            original.guestOwnerID = guestOwnerID;
            original.status = itemDetails.status;
            original.storageLocation = itemDetails.storageLocation;

            await context.SaveChangesAsync();
        }

        /// <summary>
        /// Helper function to edit FoundGuest table
        /// </summary>
        /// <param name="guestFirstName">The guest first name</param>
        /// <param name="guestLastName">The guest last name</param>
        /// <param name="guestPhone">The guest phone number</param>
        /// <param name="guestEmail">The guest phone number</param>
        /// <param name="username">The username of the guest</param>
        /// <param name="DBGuestID">The ID of the guest</param>
        /// <returns>
        /// guestID, newID
        /// </returns>
        /// <exception cref="ResourceNotFoundException">If the found item report with given id cannot be found in the database</exception>
        private (int?, string?) FoundDataHelper(string? guestFirstName, 
                                             string? guestLastName, 
                                             string? guestPhone, 
                                             string? guestEmail, 
                                             string? username, 
                                             int? DBGuestID)
        {
            int? guestID = null;
            string? newID = null;
            if (guestFirstName != null && guestLastName != null)
            {
                // Add new found guest if one does not already exist
                if (DBGuestID == null)
                {
                    var guestResults = context.FoundGuest.Add(new FoundGuest
                    {
                        firstName = guestFirstName,
                        lastName = guestLastName,
                        phoneNumber = guestPhone,
                        emailAddress = guestEmail,
                    });

                    context.SaveChanges();

                    guestID = guestResults.Entity.ID;
                }
                // Update Found Guest if guestID is not null
                else
                {
                    var originalGuest = context.FoundGuest.Find(DBGuestID);

                    if (originalGuest == null)
                    {
                        throw new ResourceNotFoundException() { ExceptionMessage = "The Found Guest was not found" };
                    }

                    originalGuest.firstName = guestFirstName;
                    originalGuest.lastName = guestLastName;
                    originalGuest.phoneNumber = guestPhone;
                    originalGuest.emailAddress = guestEmail;

                    context.SaveChanges();

                    guestID = DBGuestID;
                }

            }
            // Delete Guest if there was one already in the database
            else if (DBGuestID != null)
            {
                var originalGuest = context.FoundGuest.Find(DBGuestID);

                if (originalGuest == null)
                {
                    throw new ResourceNotFoundException() { ExceptionMessage = "The Found Guest was not found" };
                }

                context.FoundGuest.Remove(originalGuest);
            }

            if (username != null)
            {
                newID = accountService.GetAccountByUsername(username).GordonID;
            }

            return (guestID, newID);
        }

        /// <summary>
        /// Update the status of a found report with given id, to the given status message
        ///     Status text must be in the set of allowed statuses, "Active", "Expired", "Deleted", "Found"
        /// </summary>
        /// <param name="foundItemID">The id of the found item to modify</param>
        /// <param name="status">The new status</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>None</returns>
        /// <exception cref="ResourceCreationException">If not account can be found for the requesting user</exception>
        /// <exception cref="ResourceNotFoundException">If the found item report with given id cannot be found in the database</exception>
        public async Task UpdateFoundStatusAsync(string foundItemID, string status, string username)
        {
            if (!hasFullPermissions(username))
            {
                throw new ResourceNotFoundException();
            }

            var original = await context.FoundItems.FindAsync(foundItemID);

            if (original == null)
            {
                throw new ResourceNotFoundException() { ExceptionMessage = "The Missing Item Report was not found" };
            }

            original.status = status;

            await context.SaveChangesAsync();
        }

        /// <summary>
        /// Gets a found item by ID, only allowed for admin users
        /// </summary>
        /// <param name="foundItemID">The ID of the found item</param>
        /// <param name="username">The username of the person making the request</param>
        /// <returns>A Found Item object</returns>
        /// <exception cref="ResourceNotFoundException">If the report with given ID doesn't exist or the user
        /// doesn't have permissions to read it</exception>
        public FoundItemViewModel GetFoundItem(string foundItemID, string username)
        {
            if (!hasFullPermissions(username) && !hasKioskPermissions(username))
            {
                throw new ResourceNotFoundException();
            }

            FoundItemViewModel report;

            var data = context.FoundItemData.FirstOrDefault(x => x.ID == foundItemID);
            if (data != null)
            {
                report = (FoundItemViewModel)data;

                // Get the list of all admin actions on this report, and add them to the report.
                report.adminActions = context.FoundActionsTakenData.Where(x => x.foundID == foundItemID)
                                                                    .Select(x => (FoundActionsTakenViewModel)x);
            }
            else
            {
                // If no such report exists
                throw new ResourceNotFoundException();
            }
            return report;
        }

        /// <summary>
        /// Get all found items
        /// Throw unauthorized access exception if the user doesn't have admin permissions
        /// </summary>
        /// <param name="color">The selected color for filtering items</param>
        /// <param name="category">The selected category for filtering items</param>
        /// <param name="ID">The selected tag number/id for filtering by tag number</param>
        /// <param name="keywords">The selected keywords for filtering by keywords</param>
        /// <param name="status">The selected status for filtering items</param>
        /// <param name="username">The username of the person making the request</param>
        /// <param name="latestDate">The latest date that should be accepted for a query</param>
        /// <returns>An enumerable of Found Items, from the Found Item Data view</returns>
        /// <exception cref="UnauthorizedAccessException">If a user without admin permissions attempts to use</exception>
        public IEnumerable<FoundItemViewModel> GetFoundItemsAll(string username,
                                                                DateTime? latestDate,
                                                                string? status,
                                                                string? color,
                                                                string? category,
                                                                string? ID,
                                                                string? keywords)
        {
            if (!hasFullPermissions(username) && !hasKioskPermissions(username))
            {
                throw new UnauthorizedAccessException();
            }

            // Initialize database query to get all found items ordered by date found descending
            IQueryable<FoundItemData> foundItems = context.FoundItemData.OrderByDescending(item => item.dateCreated);

            // Add filters to query based on provided filters
            if (latestDate is not null)
            {
                foundItems = foundItems.Where(x => x.dateCreated <= latestDate);
            }
            if (status is not null)
            {
                foundItems = foundItems.Where(x => x.status == status);
            }
            if (color is not null)
            {
                foundItems = foundItems.Where(x => x.colors.Contains(color));
            }
            if (category is not null)
            {
                foundItems = foundItems.Where(x => x.category == category);
            }
            if (ID is not null)
            {
                foundItems = foundItems.Where(x => x.ID.Contains(ID));
            }
            if (keywords is not null)
            {
                foundItems = foundItems.Where(x => (x.ownerFirstName + " " + x.ownerLastName).Contains(keywords)
                                                    || x.description.Contains(keywords)
                                                    || x.locationFound.Contains(keywords));
            }

            // Perform a group join to create a FoundItemViewModel with actions taken data for each report
            // Using a group join results in the use of a single SQL query to the db, so is much more performant than
            // alternative solutions.
            return foundItems
                      .GroupJoin(context.FoundActionsTakenData.OrderBy(action => action.actionDate),
                          foundItem => foundItem.ID,
                          action => action.foundID,
                          (foundItem, action) => FoundItemViewModel.From(foundItem, action));
        }
        /// <summary>
        /// Service method to retrieve counts of found items.
        /// </summary>
        /// <param name="username"></param>
        /// <param name="latestDate"></param>
        /// <param name="status"></param>
        /// <param name="color"></param>
        /// <param name="category"></param>
        /// <param name="keywords"></param>
        /// <returns>Count of found items after applying filters</returns>
        /// <exception cref="ResourceNotFoundException"></exception>
        public int GetFoundItemsCount(
             string username,
             DateTime? latestDate,
             string? status,
             string? color,
             string? category,
             string? ID,
             string? keywords
         )
        {
            if (!hasFullPermissions(username))
            {
                throw new ResourceNotFoundException();
            }

            // Initialize database query to get all found items
            IQueryable<FoundItemData> query = context.FoundItemData;

            // Add filters to query based on provided filters
            if (latestDate is not null)
            {
                query = query.Where(x => x.dateCreated <= latestDate);
            }
            if (status is not null)
            {
                query = query.Where(x => x.status == status);
            }
            if (color is not null)
            {
                query = query.Where(x => x.colors.Contains(color));
            }
            if (category is not null)
            {
                query = query.Where(x => x.category == category);
            }
            if (ID is not null)
            {
                query = query.Where(x => x.ID.Contains(ID));
            }
            if (keywords is not null)
            {
                query = query.Where(x => (x.ownerFirstName + " " + x.ownerLastName).Contains(keywords)
                                                    || x.description.Contains(keywords)
                                                    || x.locationFound.Contains(keywords));
            }
            int filteredCount = query.Count();

            return filteredCount;
        }
    }
}
