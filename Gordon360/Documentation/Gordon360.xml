<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gordon360</name>
    </assembly>
    <members>
        <member name="M:Gordon360.Authorization.AuthUtils.GetUsername(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get the username of the authenticated user
            </summary>
            <param name="User">The ClaimsPrincipal representing the user's authentication claims</param>
            <returns>Username of the authenticated user</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.AcademicCheckInController.PutEmergencyContactAsync(Gordon360.Models.ViewModels.EmergencyContactViewModel)">
            <summary>Set emergency contacts for student</summary>
            <param name="data"> The contact data to be stored </param>
            <returns> The data stored </returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.AcademicCheckInController.PutCellPhoneAsync(Gordon360.Models.ViewModels.MobilePhoneUpdateViewModel)">
            <summary> Sets the students cell phone number</summary>
            <param name="data"> The phone number object to be added to the database </param>
        </member>
        <member name="M:Gordon360.Controllers.Api.AcademicCheckInController.PutDemographicAsync(Gordon360.Models.ViewModels.AcademicCheckInViewModel)">
            <summary>Sets the students race and ethinicity</summary>
            <param name="data"> The object containing the race numbers of the users </param>
            <returns> The data stored </returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.AcademicCheckInController.GetHoldsAsync">
            <summary> Gets and returns the user's holds </summary>
            <returns> The user's stored holds </returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.AcademicCheckInController.SetStatusAsync">
            <summary> Sets the user as having completed Academic Checkin </summary>
            <returns> The HTTP status indicating whether the request was completed or not</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.AcademicCheckInController.GetStatusAsync">
            <summary> Gets whether the user has checked in or not. True if they have checked in, false if they have not checked in </summary>
            <returns> The HTTP status indicating whether the request was completed and returns the check in status of the student </returns>
        </member>
        <member name="M:Gordon360.Controllers.AccountsController.SearchAsync(System.String)">
            <summary>
            Return a list of accounts matching some or all of <c>searchString</c>.
            </summary>
            <param name="searchString">The input to search for</param>
            <returns>All accounts meeting some or all of the parameter, sorted according to how well the account matched the search.</returns>
        </member>
        <member name="M:Gordon360.Controllers.AccountsController.SearchWithSpaceAsync(System.String,System.String)">
            <summary>
            Return a list of accounts matching some or all of the search parameter.
            </summary>
            <param name="firstName">The firstname portion of the search</param>
            <param name="lastName">The lastname portion of the search</param>
            <returns> All accounts matching some or all of both the firstname and lastname parameters, sorted by how well the account matched the search.</returns>
        </member>
        <member name="M:Gordon360.Controllers.AccountsController.AdvancedPeopleSearchAsync(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Return a list of accounts matching some or all of the search parameters
            We are searching through all the info of a user, then narrowing it down to get only what we want
            </summary>
            <param name="accountTypes"> Which account types to search. Accepted values: "student", "alumni", "facstaff"  </param>
            <param name="firstname"> The first name to search for </param>
            <param name="lastname"> The last name to search for </param>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="hall"></param>
            <param name="classType"></param>
            <param name="preferredClassYear"></param>
            <param name="initialYear"></param>
            <param name="finalYear"></param>
            <param name="homeCity"></param>
            <param name="state"></param>
            <param name="country"></param>
            <param name="department"></param>   
            <param name="building"></param> 
            <param name="involvement"></param>
            <param name="gender"></param>
            <returns> All accounts meeting some or all of the parameter</returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetActivitiesForSessionAsync(System.String)">
            <summary>Gets the activities taking place during a given session</summary>
            <param name="id">The session identifier</param>
            <returns>A list of all activities that are active during the given session determined by the id parameter</returns>
            <remarks>Queries the database to find which activities are active during the session desired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetActivityTypesForSessionAsync(System.String)">
            <summary>Gets the different types of activities taking place during a given session</summary>
            <param name="id">The session identifier</param>
            <returns>A list of all the different types of activities that are active during the given session determined by the id parameter</returns>
            <remarks>Queries the database to find the distinct activities type of activities that are active during the session desired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetActivityStatus(System.String,System.String)">
            <summary>
            Get the status (open or closed) of an activity for a given session
            </summary>
            <param name="sessionCode">The session code that we want to check the status for</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetOpenActivities">
            <summary>
            Get all activities that have not yet been closed out for the current session
            </summary>
            <returns>Enumerable of ActivityInfo for each open activity in the current session</returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetClosedActivities">
            <summary>
            Get all the activities that are already closed out for the current session
            </summary>
            <returns>Enumerable of ActivityInfo for each closed activity in the current session</returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.Put(System.String,Gordon360.Models.ViewModels.InvolvementUpdateViewModel)">
            <summary>
            </summary>
            <param name="involvement_code">The code of the activity to update</param>
            <param name="involvement">The updated involvement details</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.PostImageAsync(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Set an image for the activity
            </summary>
            <param name="involvement_code">The activity code</param>
            <param name="image">The image file</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.ResetImage(System.String)">
            <summary>
            Reset the activity Image
            </summary>
            <param name="involvement_code">The activity code</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.TogglePrivacy(System.String,System.Boolean)">
            <summary>Update an existing activity to be private or not</summary>
            <param name="involvement_code">The code of the involvement</param>
            <param name = "p">the boolean value</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.AddressesController.GetAllStates">
            <summary>
            Pulls all states available from Jenzabar States Table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.AddressesController.GetAllCountries">
            <summary>
            Pulls all Countries available from Jenzabar Countries Table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetMajors">
            <summary>
            Return a list majors.
            </summary>
            <returns> All majors</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetMinors">
            <summary>
            Return a list minors.
            </summary>
            <returns> All minors</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetHalls">
            <summary>
            Return a list minors.
            </summary>
            <returns> All minors</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.DEPRECATED_GetStates">
             <summary>
             Return a list states.
             </summary>
            
             <remarks>DEPRECATED: Use AddressController instead</remarks>
             <returns> All states</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.DEPREACTED_GetCountries">
            <summary>
            Return a list countries.
            </summary>
            
            <remarks>DEPRECATED: Use AddressController instead</remarks>
            <returns> All countries</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetDepartments">
            <summary>
            Return a list departments.
            </summary>
            <returns> All departments</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetBuildingsAsync(Gordon360.Models.webSQL.Context.webSQLContext)">
            <summary>
            Return a list of buildings.
            </summary>
            <returns> All buildings</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetBuildings">
            <summary>
            Return a list of buildings.
            </summary>
            <returns> All buildings</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetInvolvements">
            <summary>
            Return a list of involvements' descriptions.
            </summary>
            <returns> All involvements</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetGender">
            <summary>
            Return a list of genders excluding unknown.
            </summary>
            <returns> All genders</returns>
        </member>
        <member name="M:Gordon360.Controllers.ContentManagementController.GetBannerSlides">
            <summary>Get all the banner slides for the dashboard banner</summary>
            <returns>A list of all the slides for the banner</returns>
        </member>
        <member name="M:Gordon360.Controllers.ContentManagementController.PostBannerSlide(Gordon360.Models.ViewModels.BannerSlidePostViewModel)">
            <summary>Post a new slide for the dashboard banner</summary>
            <returns>The posted banner</returns>
        </member>
        <member name="M:Gordon360.Controllers.ContentManagementController.DeleteBannerSlide(System.Int32)">
            <summary>Remove a slide from the dashboard banner</summary>
            <returns>ID of the slide to remove</returns>
        </member>
        <member name="M:Gordon360.Controllers.DiningController.GetAsync">
            <summary>
             Gets information about student's dining plan and balance
            </summary>
            <returns>A DiningInfo object</returns>
        </member>
        <member name="M:Gordon360.Controllers.EventsController.GetAllEvents">
            <summary>
            This makes use of our cached request to 25Live, which stores AllEvents
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.DeleteApplication(System.Int32)">
            <summary>
            Delete an application (and consequently all rows that reference it)
            </summary>
            <param name="applicationID"> The id of the application to remove </param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetApartmentHalls">
            <summary>
            Get a list of the apartment-style halls
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetApplicationID">
            <summary>
            Get apartment application ID number of currently logged in user if that user is on an existing application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetUserApplicationID(System.String)">
            <summary>
            Get apartment application ID number for a user if that user is on an existing application
            </summary>
            <param name="username">username of the profile info</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.SaveApplication(Gordon360.Models.ViewModels.ApartmentApplicationViewModel)">
            <summary>
            save application
            </summary>
            <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.EditApplication(System.Int32,Gordon360.Models.ViewModels.ApartmentApplicationViewModel)">
            <summary>
            update existing application (Differentiated by HttpPut instead of HttpPost)
            </summary>
            <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.ChangeEditor(System.Int32,Gordon360.Models.ViewModels.ApartmentApplicationViewModel)">
            <summary>
            change the editor (i.e. primary applicant) of the application
            </summary>
            <returns>The result of changing the editor</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.ChangeApplicationDateSubmitted(System.Int32)">
            <summary>
            change the date an application was submitted
            (changes it from null the first time they submit)
            </summary>
            <returns>The result of changing the date submitted</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetApartmentApplication(System.Int32)">
            <summary>Get apartment application info for a given application ID number</summary>
            <param name="applicationID">application ID number of the apartment application</param>
            <returns>Object of type ApartmentAppViewModel</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetAllApartmentApplication">
            <summary>Get apartment application info for all applications if the current user is a housing admin</summary>
            <returns>Object of type ApartmentApplicationViewModel</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.CreateRoomRange(Gordon360.Models.ViewModels.Housing.HallAssignmentRangeViewModel)">
            <summary>
            Creates a new hall assignment range if it does not overlap with any existing ranges
            </summary>
            <param name="assignmentRange">The ViewModel that contains the hall ID and room range</param>
            <returns>The created Hall_Assignment_Range object</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetAllRoomRanges">
            <summary>
            Retrieves all room ranges.
            </summary>
            <returns>A list of room ranges.</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetMissedRooms">
            <summary>
            Retrieves all rooms with no associated ranges.
            </summary>
            <returns>A list of rooms.</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.DeleteRoomRange(System.Int32)">
            <summary>
            Deletes a Room Range
            </summary>
            <param name="rangeId">The ID of the room range to delete</param>
            <returns> Returns if completed</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.AssignRaToRoomRange(RA_AssignmentViewModel)">
            <summary>
            Assigns an RA to a room range if no RA is currently assigned
            </summary>
            <param name="assignment">The model containging the RA and range ids</param>
            <returns>The created RA_Assigned_Ranges object</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetRangeAssignments">
            <summary>
            Retrieves the list of all ra roomrange assignments.
            </summary>
            <returns>Returns a list of all assignments</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetRangeAssignmentsByRAId(System.String)">
            <summary>
            Retrieves the list of room range assignments for a given RA_ID.
            </summary>
            <param name="raId">The RA_ID of the assigned RA.</param>
            <returns>Returns a list of assigned ranges for the specified RA.</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.DeleteAssignment(System.Int32)">
            <summary>
            Deletes an RA range assignment
            </summary>
            <param name="rangeId">The Room range of the assignment to delete</param>
            <returns> Returns if completed</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetResidentRD(System.String)">
            <summary>
            Retrieve the RD of the resident's hall based on their hall ID.
            </summary>
            <param name="hallId">The ID of the hall.</param>
            <returns>Returns the RD's details if found, otherwise null.</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetRDs">
            <summary>
            Retrieve a list of all RDs.
            </summary>
            <returns>Returns a list of all RDs if found</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.SetRdOnCall(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Creates  an RD's on-call assignment.
            </summary>
            <param name="rdId">The ID of the Resident Director (RD)</param>
            <param name="startDate">The start date of the on-call period</param>
            <param name="endDate">The end date of the on-call period</param>
            <returns>True if the on-call assignment was successfully set</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.PatchRdOnCall(System.Int32,Gordon360.Models.ViewModels.RD_On_Call_Create)">
            <summary>
            Updates an existing RD on-call record by its record ID.
            </summary>
            <param name="recordId">The unique identifier of the RD on-call record to update.</param>
            <param name="updatedOnCall">The updated RD on-call details.</param>
            <returns>
            Returns the updated RD on-call details if successful.
            </returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.DeleteRDOnCallById(System.Int32)">
            <summary>
            Deletes an existing RD on-call record by its record ID.
            </summary>
            <param name="recordId">The unique identifier of the RD on-call record to delete.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetRDOnCall">
            <summary>
            Retrieves the Rd OnCall
            </summary>
            <returns>Returns the RDs details if found, otherwise null. </returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetActiveRDOnCalls">
            <summary>
            Retrieves a list of currently active RD on-call records.
            </summary>
            <returns>
            Returns a list of active RD on-call records if found.
            </returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetResidentRA(System.String,System.String)">
            <summary>
            Retrieves the RA assigned to a resident based on their room number and hall ID.
            </summary>
            <param name="hallId">The ID of the hall.</param>
            <param name="roomNumber">The resident's room number.</param>
            <returns>Returns the RA's details if found, otherwise null. </returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetAllRAs">
            <summary>
            Retrieves a list of all RAs.
            </summary>
            <returns>Returns a list of RA_Students containing information about each RA</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.SetPreferredContact(System.String,System.String)">
            <summary>
            Sets or updates an RA's preferred contact method
            </summary>
            <param name="raId">The ID of the RA</param>
            <param name="preferredContactMethod">The contact method (e.g., "Phone", "Teams")</param>
            <returns>True if the contact method was successfully set</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetRAContact(System.String)">
            <summary>
            Retrieves the preferred contact information for an RA based on their contact preference.
            If the RA has a contact preference set, it will return either their phone number or a Microsoft Teams link 
            with their email embedded. If no preference exists, the method defaults to returning the RA's phone number.
            </summary>
            <param name="raId">The ID of the RA whose contact information is being requested.</param>
            <returns>An object containing the RAiD, preferred method, and the actual contact.</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.RA_Checkin(System.String,System.String[])">
             <summary>
             Checks an RA in
             </summary>
             <param name="raId">Id of the ra checking in</param>
            <param name="HallIDs">The Hall(s) the RA is checking into</param>
             <returns>true if RA checked in successfully</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetOnCallRA(System.String)">
            <summary>
            Gets the on-call RA for a specified hall.
            </summary>
            <param name="hallid">The ID of the hall</param>
            <returns> the on-call RA's details, or a 404 if no RA is on call</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetOnCallRAAllHalls">
            <summary>
            Gets the on-call RAs for all halls.
            </summary>
            <returns>The RAs on call with their details</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetRACurrentHalls(System.String)">
            <summary>
            Gets the on-call RA's current halls
            </summary>
            <param name="userName">The username of the ra</param>
            <returns>The RA's current halls</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.IsRAOnCall(System.String)">
            <summary>
            Checks if an RA is currently on call.
            </summary>
            <param name="raId">The ID of the RA</param>
            <returns>True if the RA is on call, false otherwise</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.IsStudentResidential(System.Int32)">
            <summary>
            Checks if a student is residential
            </summary>
            <param name="idNum">The ID of the student</param>
            <returns>True if the student is a resident</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.CreateTask(Gordon360.Models.ViewModels.HallTaskViewModel)">
            <summary>
            Creates a new task for the given hall
            </summary>
            <param name="task">The HallTaskViewModel object containing necessary info</param>
            <returns>The created task</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.UpdateTask(System.Int32,Gordon360.Models.ViewModels.HallTaskViewModel)">
            <summary>
            Updates the task by the given ID
            </summary>
            <param name="taskID">The HallTaskViewModel object containing necessary info</param>
            <param name="task">The HallTaskViewModel object containing necessary info</param>
            <returns>The created task</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.DisableTask(System.Int32)">
            <summary>
            Disables a task
            </summary>
            <param name="taskID">The ID of the task to disable</param>
            <returns>True if disable</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.CompleteTask(System.Int32,System.String)">
            <summary>
            Marks a task completed
            </summary>
            <param name="taskID">the ID of the task to update</param>
            <param name="CompletedBy">The ID of the RA completing the task</param>
            <returns>True if completed</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.IncompleteTask(System.Int32)">
            <summary>
            Marks a task not completed
            </summary>
            <param name="taskID">the ID of the task to update</param>
            <returns>True if marked not completed</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetActiveTasksForHall(System.String)">
            <summary>
            Gets the list of active tasks
            </summary>
            <param name="hallId">the ID of the hall to get tasks for</param>
            <returns>The list of tasks</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetTasksForHall(System.String)">
            <summary>
            Gets the list of daily tasks for a hall
            </summary>
            <param name="hallId">the ID of the hall to get tasks for</param>
            <returns>The list of daily tasks</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.CreateStatusEvent(Gordon360.Models.ViewModels.RA_StatusEventsViewModel)">
            <summary>
            Creates a new status event for an RA's schedule
            </summary>
            <param name="status">The RA_StatusEventsViewModel object containing necessary info</param>
            <returns>The created status event</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.UpdateStatusEvent(System.Int32,Gordon360.Models.ViewModels.RA_StatusEventsViewModel)">
            <summary>
            Updates an existing status event for an RA's schedule
            </summary>
            <param name="statusID">The ID of the status event to update</param>
            <param name="status">The RA_StatusEventsViewModel object containing necessary info</param>
            <returns>The updated status event</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.DeleteStatusEvent(System.Int32)">
            <summary>
            Deletes a status event for an RA's schedule
            </summary>
            <param name="statusID">The ID of the status event to delete</param>
            <returns>True if deleted</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetStatusEventsForRA(System.String)">
            <summary>
            Gets the list of daily status events for an RA
            </summary>
            <param name="raID"> The ID of the RA</param>
            <returns>The list of daily status events</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetActiveStatusesByRAId(System.String)">
            <summary>
            Gets the active statuses for a given RA.
            </summary>
            <param name="raId">The ID of the RA.</param>
            <returns>A list of active statuses or a 404 if none exist.</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetStuLifeContact(System.String)">
            <summary>
            Gets a phone number
            </summary>
            <param name="PhoneName">The type of contact needed</param>
            <returns> Returns phone number</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetStuLifeContact(System.String,System.String)">
            <summary>
            sets a phone number
            </summary>
            <param name="PhoneName">name of entry</param>
            <param name="PhoneNumber">phone number to update</param>
            <returns> complete </returns>
        </member>
        <member name="M:Gordon360.Controllers.LogController.Post(System.String)">
            <summary>Create a new error log item to be added to database</summary>
            <param name="error_message">The error message containing all required and relevant information</param>
            <returns></returns>
            <remarks>Posts a new message to the service to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.CreateMissingItemReport(Gordon360.Models.ViewModels.MissingItemReportViewModel)">
            <summary>
            Create a new missing item report with given data
            </summary>
            <param name="id">The id</param>
            <returns>ObjectResult(ID) - An HTTP result code, with the ID of the created report if created successfully</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.CreateActionTaken(System.Int32,Gordon360.Models.ViewModels.ActionsTakenViewModel)">
            <summary>
            Update Missing Item Report with the given id with given data
            </summary>
            <param name="missingItemId">The id of the report to update</param>
            <returns>ObjectResult - the http status code result of the action, with the ID of the action taken</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.UpdateMissingItemReport(System.Int32,Gordon360.Models.ViewModels.MissingItemReportViewModel)">
            <summary>
            Update Missing Item Report with the given id with given data
            </summary>
            <param name="missingItemId">The id of the report to update</param>
            <returns>ObjectResult - the http status code result of the action</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.UpdateReportStatus(System.Int32,System.String)">
            <summary>
            Update the status of the item report with given id to the given status text
            </summary>
            <param name="missingItemId">The id of the report to update</param>
            <param name="status"></param>
            <returns>ObjectResult - the http status code result of the action</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.UpdateReportAssociatedFoundItem(System.Int32,System.String)">
            <summary>
            Update the status of the item report with given id to the given status text
            </summary>
            <param name="missingItemId">The id of the report to update</param>
            <param name="foundItemID"></param>
            <returns>ObjectResult - the http status code result of the action</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.GetMissingItems(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Get the list of missing item reports for the currently authenticated user.
            </summary>
            <param name="color">The selected color for filtering reports</param>
            <param name="category">The selected category for filtering reports</param>
            <param name="keywords">The selected keywords for filtering by keywords</param>
            <param name="lastCheckedDate"></param>
            <param name="status">The selected status for filtering reports</param>
            <param name="user">Query parameter, default is null and route will get all missing items, or if user is set
            route will get missing items for the authenticated user</param>
            <param name="lastId">The ID of the last fetched report to start from for pagination</param>
            <param name="pageSize">The size of the page to fetch for pagination</param>
            <returns>ObjectResult - an http status code, with an array of MissingItem objects in the body </returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.GetMissingItem(System.Int32)">
            <summary>
            Get a missing item report with given ID.
            </summary>
            <param name="missingItemId">The id of the report to get</param>
            <returns>ObjectResult - an http status code, with a MissingItem object in the body </returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.GetActionsTaken(System.Int32)">
            <summary>
            Get all actions taken on a given missing item report.
            </summary>
            <param name="missingItemId">The id of the report to get</param>
            <returns>ObjectResult - an http status code, with a list of Actions Taken objects </returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.GetMissingItemsCount(System.String,System.String,System.String,System.String)">
            <summary>
              API endpoint to get counts of missing item reports.
            </summary>
            <param name="status"></param>
            <param name="color"></param>
            <param name="category"></param>
            <param name="keywords"></param>
            <returns>Int - The number of missing items under the provided filters</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Gordon360.Controllers.LostAndFoundController.GetFoundItemsByOwner(System.String)" -->
        <member name="M:Gordon360.Controllers.LostAndFoundController.CreateFoundItemReport(Gordon360.Models.ViewModels.FoundItemViewModel)">
            <summary>
            Create a new found item.
            </summary>
            <param name="FoundItemDetails">The data of the found item to create</param>
            <returns>ObjectResult - the http status code result of the action, with the ID of the created found item</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.CreateFoundActionTaken(System.String,Gordon360.Models.ViewModels.FoundActionsTakenViewModel)">
            <summary>
            Create a new action for the found item with given ID.
            </summary>
            <param name="foundItemId">The id of the report to add an action to</param>
            <param name="FoundActionsTaken">The data for the new action</param>
            <returns>ObjectResult - the http status code result of the action, with the ID of the created action taken</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.UpdateFoundItem(System.String,Gordon360.Models.ViewModels.FoundItemViewModel)">
            <summary>
            Update a found item with the given id with given data.
            </summary>
            <param name="itemId">The id of the item to update</param>
            <param name="FoundItemDetails">The found data to update the item with</param>
            <returns>ObjectResult - the http status code result of the action</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.UpdateFoundStatus(System.String,System.String)">
            <summary>
            Update the status of the found item with given id to the given status text.
            </summary>
            <param name="itemId">The id of the item to update</param>
            <param name="status">The new status of the item</param>
            <returns>ObjectResult - the http status code result of the action</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.GetFoundItem(System.String)">
            <summary>
            Get a single found item with given ID, including it's actions taken.
            </summary>
            <param name="itemID">The tag ID of the item to get</param>
            <returns>ObjectResult - the http status code result of the action, with the found item</returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.GetFoundItems(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get the list of found items, filtered by the provided filters.
            </summary>
            <param name="color">The selected color for filtering items</param>
            <param name="category">The selected category for filtering items</param>
            <param name="ID">The selected tag number/id for filtering by tag number</param>
            <param name="keywords">The selected keywords for filtering by items</param>
            <param name="status">The selected status for filtering items</param>
            <param name="latestDate">The latest date created that the list of reports should include</param>
            <returns>ObjectResult - an http status code, with an array of FoundItem objects in the body </returns>
        </member>
        <member name="M:Gordon360.Controllers.LostAndFoundController.GetFoundItemsCount(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String)">
            <summary>
              API endpoint to get counts of found items.
            </summary>
            <param name="latestDate"></param>
            <param name="status"></param>
            <param name="color"></param>
            <param name="category"></param>
            <param name="ID"></param>
            <param name="keywords"></param>
            <returns>Int - The number of found items under the provided filters</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetMemberships(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get all the memberships associated with a given activity
            </summary>
            <param name="involvementCode">Optional involvementCode filter</param>
            <param name="username">Optional username filter</param>
            <param name="sessionCode">Optional session code for which session memberships should be retrieved. Defaults to current session. Use "*" for all sessions.</param>
            <param name="participationTypes">Optional list of participation types that should be retrieved. Defaults to all participation types.</param>
            <returns>An IEnumerable of the matching MembershipViews</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetMembershipCount(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the number of memberships matching the specified filters
            </summary>
            <param name="activityCode">Optional activityCode filter</param>
            <param name="username">Optional username filter</param>
            <param name="sessionCode">Optional session code for which session memberships should be retrieved. Defaults to current session. Use "*" for all sessions.</param>
            <param name="participationTypes">Optional list of participation types that should be retrieved. Defaults to all participation types.</param>
            <returns>The number of followers of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetMembershipsForActivityAndSession(System.String,System.String)">
            <summary>
            Get all the memberships associated with a given activity
            </summary>
            <param name="activityCode">The activity ID</param>
            <param name="sessionCode">Optional code of session to get for</param>
            <returns>An IEnumerable of the matching MembershipViews</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetGroupAdminsForActivity(System.String,System.String)">
            <summary>
            Gets the group admin memberships associated with a given activity.
            </summary>
            <param name="activityCode">The activity ID.</param>
            <param name="sessionCode">The session code of the activity.</param>
            <returns>An IEnumerable of all leader-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetActivitySubscribersCountForSession(System.String,System.String)">
            <summary>
            Gets the number of followers of an activity
            </summary>
            <param name="activityCode">The activity ID.</param>
            <param name="sessionCode">The session code</param>
            <returns>The number of followers of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetActivityMembersCountForSession(System.String,System.String)">
            <summary>
            Gets the number of members (excluding followers) of an activity
            </summary>
            <param name="activityCode">The activity ID.</param>
            <param name="sessionCode">The session code</param>
            <returns>The number of members of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.PostAsync(Gordon360.Models.ViewModels.MembershipUploadViewModel)">
            <summary>Create a new membership item to be added to database</summary>
            <param name="membershipUpload">The membership item containing all required and relevant information</param>
            <returns>The newly created membership as a MembershipView object</returns>
            <remarks>Posts a new membership to the server to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.PutAsync(System.Int32,Gordon360.Models.ViewModels.MembershipUploadViewModel)">
            <summary>Update an existing membership item</summary>
            <param name="membershipID">The membership id of whichever one is to be changed</param>
            <param name="membership">The content within the membership that is to be changed and what it will change to</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
            <returns>The updated membership as a MembershipView object</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.SetGroupAdminAsync(System.Int32,System.Boolean)">
            <summary>Update an existing membership item to be a group admin or not</summary>
            <param name="membershipID">The content within the membership that is to be changed</param>
            <param name="isGroupAdmin">The new value of GroupAdmin</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
            <returns>The updated membership as a MembershipView object</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.SetPrivacyAsync(System.Int32,System.Boolean)">
            <summary>Update an existing membership item to be private or not</summary>
            <param name="membershipID">The membership to set the privacy of</param>
            <param name="isPrivate">The new value of Privacy for the membership</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
            <returns>The updated membership as a MembershipView object</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.Delete(System.Int32)">
            <summary>Delete an existing membership</summary>
            <param name="membershipID">The identifier for the membership to be deleted</param>
            <remarks>Calls the server to make a call and remove the given membership from the database</remarks>
            <returns>The deleted membership as a MembershipView object</returns>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetByID(System.Int32)">
            <summary>Gets a news item by id from the database</summary>
            <param name="newsID">The id of the news item to retrieve</param>
            <returns>The news item</returns>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetImage(System.Int32)">
            <summary>Gets the base64 image data for an image corresponding 
            to a student news item. Only used by GO; when we move student news approval
            to 360, this will be removed.</summary>
            <param name="newsID">The id of the news item to retrieve image from</param>
            <returns>base64 string representing image</returns>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetNotExpiredAsync">
            Call the service that gets all approved student news entries not yet expired, filtering
            out the expired by comparing 2 weeks past date entered to current date
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetNewAsync">
            Call the service that gets all new and approved student news entries
            which have not already expired,
            checking novelty by comparing an entry's date entered to 10am on the previous day
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetCategories">
            Call the service that gets the list of categories
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetNewsPersonalUnapprovedAsync">
            Call the service that gets all unapproved student news entries (by a particular user)
            not yet expired, filtering out the expired news
            @TODO: Remove redundant username/id from this and service
            @TODO: fix documentation comments
        </member>
        <member name="M:Gordon360.Controllers.NewsController.Post(Gordon360.Models.ViewModels.StudentNewsUploadViewModel)">
            Create a new news item to be added to the database
            @TODO: Remove redundant username/id from this and service
            @TODO: fix documentation comments
        </member>
        <member name="M:Gordon360.Controllers.NewsController.Delete(System.Int32)">
            <summary>Deletes a news item from the database</summary>
            <param name="newsID">The id of the news item to delete</param>
            <returns>The deleted news item</returns>
            <remarks>The news item must be authored by the user and must not be expired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.EditPosting(System.Int32,Gordon360.Models.ViewModels.StudentNewsUploadViewModel)">
            <summary>
            (Controller) Edits a news item in the database
            </summary>
            <param name="newsID">The id of the news item to edit</param>
            <param name="studentNewsEdit">The news object that contains updated values</param>
            <returns>The updated news item</returns>
            <remarks>The news item must be authored by the user and must not be expired and must be unapproved</remarks>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.EditPostingImage(System.Int32,System.String)">
            <summary>
            (Controller) Edits a news image in the database
            </summary>
            <param name="newsID">The id of the news item to edit</param>
            <param name="newImageData">The new image string updates the image value</param>
            <returns>The updated news item</returns>
            <remarks>The news item must be authored by the user and must not be expired and must be unapproved</remarks>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.UpdateAcceptedStatus(System.Int32,System.Boolean)">
            <summary>
             Approve or deny a news posting in the database
            </summary>
            <param name="newsID">The id of the news item to approve</param>
            <param name="newsStatusAccepted">The accept status that will apply to the news item</param>
            <returns>The approved or denied news item</returns>
            <remarks>The news item must not be expired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.Get">
            <summary>Get profile info of currently logged in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetUserProfile(System.String)">
            <summary>Get public profile info for a user</summary>
            <param name="username">username of the profile info</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetAdvisorsAsync(System.String)">
            <summary>Get the advisor(s) of a particular student</summary>
             <returns>
             All advisors of the given student.  For each advisor,
             provides first name, last name, and username.
             </returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetCliftonStrengths_DEPRECATED(System.String)">
            <summary> Gets the clifton strengths of a particular user </summary>
            <param name="username"> The username for which to retrieve info </param>
            <returns> Clifton strengths of the given user. </returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetCliftonStrengths(System.String)">
            <summary> Gets the clifton strengths of a particular user </summary>
            <param name="username"> The username for which to retrieve info </param>
            <returns> Clifton strengths of the given user. </returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.ToggleCliftonStrengthsPrivacyAsync">
            <summary>Toggle privacy of the current user's Clifton Strengths</summary>
            <returns>New privacy value</returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetEmergencyContact(System.String)">
            <summary> Gets the emergency contact information of a particular user </summary>
            <param name="username"> The username for which to retrieve info </param>
            <returns> Emergency contact information of the given user. </returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetMailInfo">
            <summary>Gets the mailbox information of currently logged in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetBirthdate">
            <summary>Gets the date of birth of the current logged-in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetMyImgAsync">
            <summary>Get the profile image of currently logged in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetImgAsync(System.String)">
            <summary>Get the profile image of the given user</summary>
            <returns>The profile image(s) that the authenticated user is allowed to see, if any</returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.PostImageAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Set an image for profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.PostIDImageAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Set an IDimage for a user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.ResetImage">
            <summary>
            Reset the profile Image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateCustomProfile(System.String,Gordon360.Models.CCT.CUSTOM_PROFILE)">
            <summary>
            Update CUSTOM_PROFILE component
            </summary>
            <param name="type">The type of component</param>
            <param name="value">The value to change the component to</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateMobilePhoneNumber(System.String)">
            <summary>
            Update mobile phone number
            </summary>
            <param name="value">phoneNumber</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateOfficeLocation(Gordon360.Models.ViewModels.OfficeLocationPatchViewModel)">
            <summary>
            Update office location (building description and room number)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateOfficeHours(System.String)">
            <summary>
            Update office hours
            </summary>
            <param name="value">office hours</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateMailStop(System.String)">
            <summary>
            Update mail location
            </summary>
            <param name="value">mail location</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateMobilePrivacyAsync(System.String)">
            <summary>
            Update privacy of mobile phone number
            </summary>
            <param name="value">Y or N</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateImagePrivacyAsync(System.String)">
            <summary>
            Update privacy of profile image
            </summary>
            <param name="value">Y or N</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.RequestUpdate(Gordon360.Models.ViewModels.ProfileFieldViewModel[])">
            <summary>
            Posts fields into CCT.dbo.Information_Change_Request 
            Sends Alumni Profile Update Email to "devrequest@gordon.edu"
            </summary>
            <param name="updatedFields">Object with Field's Name and Field's Value, unused Field's Label</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetProfileImageOrDefault(System.String)">
            <summary>
            Gets the profile image at the given path or, if that file does not exist, the 360 default profile image
            </summary>
            <remarks>
            Note that the 360 default profile image is different from a user's default image.
            A given user's default image is simply their approved ID photo.
            The 360 default profile image, on the other hand, is a stock image of Scottie Lion.
            Hence, the 360 default profile image is only used when no other image exists (or should be displayed) for a user.
            </remarks>
            <param name="imagePath">Path to the profile image to load</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetMembershipsByUser(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Fetch memberships that a specific student has been a part of
            @TODO: Move security checks to state your business? Or consider changing implementation here
            </summary>
            <param name="username">The Student Username</param>
            <param name="sessionCode">Optional session code or "current". If passed, only memberships from that session will be included. </param>
            <param name="participationTypes">Optional participation type. If passed, only memberships of those participation types will be inlcuded</param>
            <returns>The membership information that the student is a part of</returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetMembershipHistory(System.String)">
            <summary>
            Fetch the history of a user's memberships
            </summary>
            <param name="username">The Student Username</param>
            <returns>The history of that user's membership in involvements</returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetMailStops">
            <summary>
            Return a list of mail destinations' descriptions.
            </summary>
            <returns> All Mail Destinations</returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetGraduationInfo(System.String)">
            <summary> Gets the graduation information of a particular user </summary>
            <param name="username"> The username for which to retrieve info </param>
            <returns> Graduation information of the given user. </returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.ActivitiesController.GetActivities(System.Nullable{System.Boolean})">
            <summary>Gets a list of all Activities by parameter </summary>
            <param name="active"> Optional active parameter denoting whether or not an activity has been completed </param>
             <returns>
             All Existing Activities 
             </returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.ActivitiesController.GetActivityByID(System.Int32)">
            <summary>Gets a Activity object by ID number</summary>
             <param name="activityID">Activity ID Number</param>
             <returns>
             Activity object
             </returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.ActivitiesController.GetActivityRegistrationStatus(System.Int32)">
            <summary>
            Niche function to check if the activity is still open for registration
            </summary>
            <param name="activityID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.ActivitiesController.CreateActivityAsync(Gordon360.Models.ViewModels.RecIM.ActivityUploadViewModel)">
            <summary>
            Posts Activity into CCT.RecIM.Activity
            </summary>
            <param name="newActivity">CreateActivityViewModel object with appropriate values</param>
            <returns>Posted Activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.ActivitiesController.UpdateActivityAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.ActivityPatchViewModel)">
            <summary>
            Updates Activity based on input
            </summary>
            <param name="activityID"> Activity ID</param>
            <param name="updatedActivity"> Updated Activity Object </param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.ActivitiesController.DeleteActivityCascadeAsync(System.Int32)">
            <summary>
            Cascade deletes all DBobjects related to given ActivityID
            </summary>
            <param name="activityID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.AffiliationsController.GetAllAffiliationDetails">
            <summary>
            Gets all stored affiliations/halls/clubs with associated
            Points/Activities Won : Winning Team
            </summary>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.AffiliationsController.GetAffiliationDetailsByName(System.String)">
            <summary>
            Gets specific stored affiliation with associated
            Points/Activities Won : Winning Team
            </summary>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.AffiliationsController.CreateAffiliation(System.String)">
            <summary>
            Creates new Affiliation
            </summary>
            <param name="affiliationName"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.AffiliationsController.UpdateAffiliation(System.String,Gordon360.Models.ViewModels.RecIM.AffiliationPatchViewModel)">
            <summary>
            Updates an affiliation's logo and/or name
            </summary>
            <param name="affiliationName"></param>
            <param name="update">updated instance of affiliation</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.AffiliationsController.AddPointsToAffilliation(System.String,Gordon360.Models.ViewModels.RecIM.AffiliationPointsUploadViewModel)">
            <summary>
            Creates new AffiliationPoints entry 
            (affiliationname, activity where points were attributed, optional points)
            </summary>
            <param name="vm">put viewmodel</param>
            <param name="affiliationName"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.AffiliationsController.DeleteAffiliation(System.String)">
            <summary>
            Deletes affiliation
            </summary>
            <param name="affiliationName"></param>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.GetMatches">
            <summary>
            Get all matches
            </summary>
            <returns>all matches</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.GetMatchAttendanceByMatchID(System.Int32)">
            <summary>
            Get's current match attendance for a specified match
            </summary>
            <param name="matchID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.GetMatchByID(System.Int32)">
            <summary>
            Fetches Match by MatchID
            </summary>
            <param name="matchID"></param>
            <returns>The match with the requested matchID (or null)</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.GetMatchTypes(System.String)">
            <summary>
            Match lookup
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.GetSurfaces">
            <summary>
            Gets all surfaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.PostSurfaceAsync(Gordon360.Models.ViewModels.RecIM.SurfaceUploadViewModel)">
            <summary>
            Creates a new match/series surface
            </summary>
            <param name="newSurface"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.UpdateSurfaceAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.SurfaceUploadViewModel)">
            <summary>
            Updates a given surface
            </summary>
            <param name="surfaceID"></param>
            <param name="updatedSurface"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.DeleteSurfaceAsync(System.Int32)">
            <summary>
            Deletes surface, points all foreign keys to an unknown surface
            to prevent corrupted data
            </summary>
            <param name="surfaceID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.UpdateStatsAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.MatchStatsPatchViewModel)">
            <summary>
            Updates Match Scores, Sportsmanship Ratings, and Team Status
            </summary>
            <param name="matchID"></param>
            <param name="updatedMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.UpdateMatchAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.MatchPatchViewModel)">
            <summary>
            Updates Match Start Times and Surfaces
            </summary>
            <param name="matchID"></param>
            <param name="updatedMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.CreateMatchAsync(Gordon360.Models.ViewModels.RecIM.MatchUploadViewModel)">
            <summary>
            Creates Match
            </summary>
            <param name="newMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.DeleteMatchCascadeAsync(System.Int32)">
            <summary>
            Cascade deletes all DBobjects related to given Match ID
            </summary>
            <param name="matchID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.PutParticipantAttendanceAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.ParticipantAttendanceViewModel)">
            <summary>
            creates match attendance
            </summary>
            <param name="matchID"></param>
            <param name="teamID"></param>
            <param name="teamAttendanceList">List of attendees for a team</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.AddParticipantAttendanceAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.MatchAttendance)">
            <summary>
            Adds single match participant
            </summary>
            <param name="matchID">match id</param>
            <param name="attendee">object holding required username (optional teamID)</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.MatchesController.DeleteParticipantAttendanceAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.MatchAttendance)">
            <summary>
            Deletes single match participant
            </summary>
            <param name="matchID">match id</param>
            <param name="attendee">object holding required username (optional teamID)</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.ParticipantsController.GetParticipantMatches(System.String)">
            <summary>
            Used primarily on the rec-im base page, fetches all future/upcoming matches for a participant
            </summary>
            <param name="username">participant username</param>
            <returns>list of upcoming matches of given participant</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.RecIMAdminController.GetReport(System.DateTime,System.DateTime)">
            <summary>
            Rec-IM Reporting:
                Every semester Rec-IM needs to report, their own client,
                information regarding new users, retention of users, 
                gender ratio, involvements...
                
                This route does not specify semester terms, however, is more
                specific in which it can select time constraints from beginning
                to end with no limit to time in between
            </summary>
            <param name="startTime">report start time</param>
            <param name="endTime">report end time</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.GetSeries(System.Boolean)">
            <summary>
            Queries all Series with an optional active tag
            </summary>
            <param name="active"></param>
            <returns>Enumerable Set of Series</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.GetSeriesByID(System.Int32)">
            <summary>
            Gets specific Series
            </summary>
            <param name="seriesID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.GetSeriesTypes(System.String)">
            <summary>
            Returns all types/statuses of a series available for selection
            </summary>
            <param name="type">specific series type</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.GetSeriesScheduleByID(System.Int32)">
            <summary>
            Returns 
            </summary>
            <param name="seriesID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.UpdateSeriesAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.SeriesPatchViewModel)">
            <summary>
            Updates Series Information
            </summary>
            <param name="seriesID"></param>
            <param name="updatedSeries"></param>
            <returns>modified series</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.CreateSeriesAsync(Gordon360.Models.ViewModels.RecIM.SeriesUploadViewModel,System.Nullable{System.Int32})">
            <summary>
            Creates Series and associated SeriesTeam Models
            </summary>
            <param name="newSeries">CreateSeriesViewModel</param>
            <param name="referenceSeriesID">ID of Series, used to select specific Teams </param>
            <returns>created series</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.CreateSeriesScheduleAsync(Gordon360.Models.ViewModels.RecIM.SeriesScheduleUploadViewModel)">
            <summary>
            Creates schedule or finds existing schedule
            </summary>
            <param name="seriesSchedule">created schedule for series</param>
            <returns>created series schedule</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.UpdateSeriesTeamRecordAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.TeamRecordPatchViewModel)">
            <summary>
            Updates team record manually (mitigates potential bugs)
            </summary>
            <param name="seriesID"></param>
            <param name="update">Updated team record</param>
            <returns>updated team record</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.GetSeriesWinners(System.Int32)">
            <summary>
            gets all series winners
            </summary>
            <param name="seriesID"></param>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.UpdateSeriesWinnersAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.AffiliationPointsUploadViewModel)">
            <summary>
            Adds/Removes additional winners to a series
            </summary>
            <param name="seriesID"></param>
            <param name="vm"></param>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.DeleteSeriesCascadeAsync(System.Int32)">
            <summary>
            Cascade deletes all DBobjects related to given Series ID
            </summary>
            <param name="seriesID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.ScheduleMatchesAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.UploadScheduleRequest)">
            <summary>
            Automatically creates Matches based on given Series
            </summary>
            <param name="seriesID"></param>
            <param name="request">optional request data, used for additional options on autoscheduling</param>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.GetAutoScheduleEstimate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gives last date and number of matches of which the Auto Scheduler will create matches until.
            </summary>
            <param name="seriesID"></param>
            <param name="RoundRobinMatchCapacity"></param>
            <param name="NumberOfLadderMatches"></param>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SeriesController.GetBracket(System.Int32)">
            <summary>
            Gets available bracket information for a givaen series
            </summary>
            <param name="seriesID"></param>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SportsController.GetSports">
            <summary>
            Fetches all Sports in the RecIM database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SportsController.GetSportByID(System.Int32)">
            <summary>
            Gets specific sport by ID
            </summary>
            <param name="sportID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SportsController.UpdateSportAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.SportPatchViewModel)">
            <summary>
            Update Sport in the database by ID
            </summary>
            <param name="sportID"></param>
            <param name="updatedSport"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SportsController.DeleteSportAsync(System.Int32)">
            <summary>
            Deletes Sport in the database by ID
            </summary>
            <param name="sportID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.SportsController.CreateSportAsync(Gordon360.Models.ViewModels.RecIM.SportUploadViewModel)">
            <summary>
            Creates new Sport for RecIM
            </summary>
            <param name="newSport"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.GetTeams(System.Boolean)">
            <summary>
            Get all team objects stored in rec-im
            </summary>
             <param name="active"></param>
             <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.GetTeamByID(System.Int32)">
            <summary>
            Get a Team object by ID number
            </summary>
             <param name="teamID"></param>
             <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.GetTeamTypes(System.String)">
            <summary>
            Returns all team lookup types
            </summary>
            <param name="type">specified team type</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.PostTeamAsync(Gordon360.Models.ViewModels.RecIM.TeamUploadViewModel)">
            <summary>
            Create a new team with the requesting user set to team captain
            </summary>
            <param name="newTeam"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.AddParticipantToTeamAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.ParticipantTeamUploadViewModel)">
            <summary>
            Add a participant to a team
            </summary>
            <param name="teamID"></param>
            <param name="participant">Default Role Value value 3 (Member)</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.UpdateParticipantTeamAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.ParticipantTeamUploadViewModel)">
            <summary>
            Updates Participant role in a team
            </summary>
            <param name="teamID"></param>
            <param name="participant"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.DeleteTeamAsync(System.Int32)">
            <summary>
            Removes team and all participants in the team
            </summary>
            <param name="teamID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.DeleteTeamParticipantAsync(System.Int32,System.String)">
            <summary>
            Removes specified user from a team
            </summary>
            <param name="teamID"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.UpdateTeamInfoAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.TeamPatchViewModel)">
            <summary>
            Update a team info
            </summary>
            <param name="team"></param>
            <param name="teamID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.GetTeamInvites">
            <summary>
            Get all team invites of the user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.NumberOfGamesParticipatedByParticipant(System.Int32,System.String)">
            <summary>
            Gets number of games a participant has participated in for a team
            </summary>
            <param name="teamID"></param>
            <param name="username"></param>
            <returns>number of games a participant has attended for a team</returns>
        </member>
        <member name="M:Gordon360.Controllers.RecIM.TeamsController.HandleTeamInviteAsync(System.Int32,System.String)">
            <summary>
            Accept one specified team invite and true delete others from the same activity if there's any
            </summary>
            <param name="teamID"></param>
            <param name="response"></param>
            <returns>The accepted TeamInviteViewModel</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Get">
            <summary>
            Gets all Membership Request Objects
            </summary>
            <returns>List of all requests for membership</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Get(System.Int32)">
            <summary>
             Gets a specific Membership Request Object
            </summary>
            <param name="id">The ID of the membership request</param>
            <returns>A RequestView that matches the specified id</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.GetMembershipRequestsByActivity(System.String,System.String,System.String)">
            <summary>
            Gets the memberships requests for the specified activity
            </summary>
            <param name="activityCode">The activity code</param>
            <param name="sessionCode">The session code</param>
            <param name="requestStatus">The optional status of the requests to search</param>
            <returns>All membership requests associated with the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.GetMembershipsRequestsForCurrentUser">
            <summary>
            Gets the memberships requests for the person making the request
            </summary>
            <returns>All membership requests associated with the current user</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.PostAsync(Gordon360.Models.CCT.RequestUploadViewModel)">
            <summary>
            Creates a new membership request
            </summary>
            <param name="membershipRequest">The request to be added</param>
            <returns>The added request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.PutAsync(System.Int32,Gordon360.Models.CCT.RequestUploadViewModel)">
            <summary>
            Updates a membership request
            </summary>
            <param name="membershipRequestID">The membership request id</param>
            <param name="membershipRequest">The updated membership request object</param>
            <returns>The updated request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.UpdateStatusAsync(System.Int32,System.String)">
            <summary>
            Sets a membership request to Approved
            </summary>
            <param name="membershipRequestID">The id of the membership request in question.</param>
            <param name="status">The status that the membership requst will be changed to.</param>
            <returns>The updated request</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Delete(System.Int32)">
            <summary>
            Deletes a membership request
            </summary>
            <param name="membershipRequestID">The id of the membership request to delete</param>
            <returns>The deleted request as a RequestView</returns>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleController.GetAllCourses(System.String)">
            <summary>
             Gets all session objects for a user
            </summary>
            <returns>A IEnumerable of session objects as well as the schedules</returns>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleController.GetCanReadStudentSchedules">
            <summary>
            Get whether the currently logged-in user can read student schedules
            </summary>
            <returns>Whether they can read student schedules</returns>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.Get">
            <summary>Get a list of all sessions</summary>
            <returns>All sessions within the database</returns>
            <remarks>Queries the database for all sessions, current and past</remarks>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.Get(System.String)">
            <summary>Get one specific session specified by the id in the URL string</summary>
            <param name="id">The identifier for one specific session</param>
            <returns>The information about one specific session</returns>
            <remarks>Queries the database regarding a specific session with the given identifier</remarks>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.GetCurrentSession">
            <summary>
            Gets the current active session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.GetDaysLeftInSemester">
            <summary>
            Gets the days left in the current session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.StudentEmploymentController.GetAsync">
            <summary>
             Gets student employment information about the user
            </summary>
            <returns>A Student Employment Json</returns>
        </member>
        <member name="T:Gordon360.Controllers.VersionController">
            <summary>
            Get the short git SHA-1 and build date for the backend
            </summary>
            <returns>"Git Hash: {hashCode}; Build Time: {date and time}"</returns>
            <remarks></remarks>
        </member>
        <member name="M:Gordon360.Controllers.VictoryPromiseController.Get">
            <summary>
             Gets current victory promise scores
            </summary>
            <returns>A VP Json</returns>
        </member>
        <member name="F:Gordon360.Enums.Participation.GroupAdmin">
            <summary>
            NOTE: Group admin is not strictly a participation type. 
            It's a separate role that Advisors and Leaders can have, with a separate flag in the database 
            BUT, it's convenient to treat it as a participation type in several places throughout the API
            </summary>
        </member>
        <member name="M:Gordon360.Extensions.System.DateTimeExtensions.SpecifyUtc(System.DateTime)">
            <summary>
            Specify the given DateTime as UTC, without changing the time value.
            </summary>
            <param name="dateTime"></param>
            <returns>dateTime with type UTC</returns>
        </member>
        <member name="M:Gordon360.Extensions.System.DateTimeExtensions.SpecifyUtc(System.Nullable{System.DateTime})">
            <summary>
            Specify the given DateTime? as UTC, without changing the time value.
            </summary>
            <param name="nullableDateTime"></param>
            <returns>dateTime with type UTC, or null</returns>
        </member>
        <member name="M:Gordon360.Extensions.System.DateTimeExtensions.ConvertFromUtc(System.DateTime,System.String)">
            <summary>
            Converts UTC DateTime to Eastern Standard Time 
            List of time zones specified by TimeZoneInfo https://i.stack.imgur.com/zHzGt.png
            </summary>
            <param name="dateTime">DateTime with kind UTC</param>
            <param name="timeZoneID">String timezoneinfo location</param>
            <returns>Converted DateTime with kind Unspecified</returns>
        </member>
        <member name="M:Gordon360.Extensions.System.DateTimeExtensions.ConvertFromUtc(System.Nullable{System.DateTime},System.String)">
            <summary>
            Converts UTC DateTime? to Eastern Standard Time 
            List of time zones specified by TimeZoneInfo https://i.stack.imgur.com/zHzGt.png
            </summary>
            <param name="nullableDateTime">DateTime? with kind UTC</param>
            <param name="timeZoneID">String timezoneinfo location</param>
            <returns>Converted DateTime with kind Unspecified or null if parameter is null</returns>
        </member>
        <member name="M:Gordon360.Extensions.System.DateTimeExtensions.ConvertToUtc(System.DateTime,System.String)">
            <summary>
            Converts Location of specified by TimeZoneInfoID DateTime to UTC
            List of time zones specified by TimeZoneInfo https://i.stack.imgur.com/zHzGt.png
            </summary>
            <param name="dateTime">Unspecified kind DateTime</param>
            <param name="timeZoneID">String timezoneinfo location</param>
            <returns>Converted DateTime with kind UTC</returns>
        </member>
        <member name="M:Gordon360.Extensions.System.DateTimeExtensions.ConvertToUtc(System.Nullable{System.DateTime},System.String)">
            <summary>
            Converts Location of specified by TimeZoneInfoID DateTime to UTC
            List of time zones specified by TimeZoneInfo https://i.stack.imgur.com/zHzGt.png
            </summary>
            <param name="nullableDateTime">Unspecified kind DateTime?</param>
            <param name="timeZoneID">String timezoneinfo location</param>
            <returns>Converted DateTime with kind UTC</returns>
        </member>
        <member name="P:Gordon360.Models.CCT.Clifton_Strengths.Private">
            <summary>
            Whether the user wants their strengths to be private (not shown to other users)
            </summary>
        </member>
        <member name="M:Gordon360.Models.ViewModels.BasicInfoViewModel.MatchSearch(System.String)">
            <summary>
            Matches basic info fields against <c>search</c>, returning a match key representing the value and precedence of the first match, or <c>null</c>.
            </summary>
            
            <remarks>
            The match key is leading 'z's equal to the precedence of the match, followed by the matched field.
            This key, when used to sort aplhabetically, will sort matched accounts by the precedence of the matched field and alphabetically within precedence level.
            The precedence of a match is determined by the following, in order:
            <list type="number">
            <item><description>How the search matches the field</description>
                <list type="number">
                    <item><description>Equals</description></item>
                    <item><description>Starts With</description></item>
                    <item><description>Contains</description></item>
                </list>
            </item>
            <item><description>Which field the search matches</description>
                <list type="number">
                    <item><description>FirstName</description></item>
                    <item><description>NickName</description></item>
                    <item><description>LastName</description></item>
                    <item><description>MaidenName</description></item>
                    <item><description>UserName</description></item>
                </list>
            </item>
            </list>
            
            </remarks>
            
            <param name="search">The search input to match against</param>
            <returns>The match key if <c>search</c> matched a field, or <c>null</c></returns>
        </member>
        <member name="M:Gordon360.Models.ViewModels.BasicInfoViewModel.MatchSearch(System.String,System.String)">
            <summary>
            Matches basic info fields against the first and last names of a search, returning a match key representing the value and precedence of the first match, or <c>null</c>.
            </summary>
            
            <remarks>
            The match key is leading 'z's equal to the precedence of both matches, followed by the matched fields (first then last), separated by a '1' to sort short first names above longer first names.
            This key, when used to sort aplhabetically, will sort matched accounts by the precedence of the matched field and alphabetically within precedence level.
            The precedence of a match is determined by the following, in order:
            <list type="number">
            <item><description>How the search matches the field</description>
                <list type="number">
                    <item><description>Equals</description></item>
                    <item><description>Starts With</description></item>
                    <item><description>Contains</description></item>
                </list>
            </item>
            <item><description>Which field the search matches</description>
                <list type="number">
                    <item><description>FirstName</description></item>
                    <item><description>NickName</description></item>
                    <item><description>LastName</description></item>
                    <item><description>MaidenName</description></item>
                    <item><description>UserName</description></item>
                </list>
            </item>
            </list>
            
            </remarks>
            
            <param name="firstnameSearch">The first name of the search input to match against</param>
            <param name="lastnameSearch">The last name of the search input to match against</param>
            <returns>The match key if first and last name both matched a field, or <c>null</c></returns>
        </member>
        <member name="M:Gordon360.Models.ViewModels.StudentNewsViewModel.From(Gordon360.Models.MyGordon.StudentNews,Gordon360.Models.MyGordon.StudentNewsCategory)">
            <summary>
            Returns StudentNewsViewModel from StudentNews and StudentNewsCategory
            </summary>
            <param name="sn">The StudentNews table</param>
            <param name="snc">The StudentNewsCategory table</param>
            <returns> StudentNewsViewModel </returns>
        </member>
        <member name="P:Gordon360.Models.webSQL.Models.account.AD_Username">
            <summary>
            Active Directory Username
            </summary>
        </member>
        <member name="P:Gordon360.Models.webSQL.Models.Photo.ID">
            <summary>
            Unique sequntial ID
            </summary>
        </member>
        <member name="P:Gordon360.Models.webSQL.Models.Photo.Accountid">
            <summary>
            From account table
            </summary>
        </member>
        <member name="T:Gordon360.Services.AcademicCheckInService">
            <summary>
            Service Class that facilitates data transactions between the AcademicCheckInController and the CheckIn database model.
            </summary>
            
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.#ctor(Gordon360.Models.CCT.Context.CCTContext,Gordon360.Services.IProfileService,Gordon360.Services.IAccountService)">
            <summary>
            Service Class that facilitates data transactions between the AcademicCheckInController and the CheckIn database model.
            </summary>
            
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.PutEmergencyContactAsync(Gordon360.Models.ViewModels.EmergencyContactViewModel,System.String,System.String)">
            <summary> Stores the emergency contact information of a particular user </summary>
            <param name="data"> The object that stores the contact info </param>
            <param name="id"> The students id number</param>
            <returns> The stored data </returns>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.CreateNotesValue(System.String,System.String)">
            <summary>
            Create the notes value for the database to be passed in with the rest of the data.
            The reason for this is that the notes column in the database is only made up of what phone numbers a contact has that are international
            </summary>
            <param name="MobilePhone"> The mobile phone of the contact</param>
            <param name="HomePhone"> The home phone of the contact </param>
            <returns> The formatted notes parameter to be passed to the database </returns>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.PutCellPhoneAsync(System.String,Gordon360.Models.ViewModels.MobilePhoneUpdateViewModel)">
            <summary> Stores the cellphone preferences for the current user </summary>
            <param name="data"> The phone number object for the user </param>
            <param name="username"> The username of the student to be updated </param>
            <returns> The stored data </returns>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.PutDemographicAsync(System.String,Gordon360.Models.ViewModels.AcademicCheckInViewModel)">
            <summary> Stores the demographic data (race and ethnicity) of the current user </summary>
            <param name="data"> The race and ethnicity data for the user </param>
            <param name="id"> The id of the user to be updated </param>
            <returns> The stored data </returns>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.GetHoldsAsync(System.String)">
            <summary> Gets the holds of the user with the given ID </summary>
            <param name="id"> The id of the user whose holds are to be found </param>
            <returns>Data about any holds the user has</returns>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.SetStatusAsync(System.String)">
            <summary> Sets the user as having been checked in </summary>
            <param name="id"> The id of the user who is to be marked as checked in </param>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.GetStatusAsync(System.String)">
            <summary> Gets the whether the user has completed Academic Checkin </summary>
            <param name="id"> The id of the user for which the data is to be found for </param>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.FormatNumber(System.String)">
            <summary> Formats a phone number for insertion into the database </summary>
            <param name="phoneNum"> The phone number to be formatted </param>
            <returns> The formatted number </returns>
        </member>
        <member name="M:Gordon360.Services.AcademicCheckInService.PhoneNumberRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\+?\\d*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '+' atomically, optionally.<br/>
            ○ Match a Unicode digit atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Gordon360.Services.AccountService">
            <summary>
            Service Class that facilitates data transactions between the AccountsController and the Account database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AccountService.#ctor(Gordon360.Models.CCT.Context.CCTContext)">
            <summary>
            Service Class that facilitates data transactions between the AccountsController and the Account database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByID(System.String)">
            <summary>
            Fetches a single account record whose id matches the id provided as an argument
            </summary>
            <param name="id">The person's gordon id</param>
            <returns>AccountViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAll">
            <summary>
            Fetches all the account records from storage.
            </summary>
            <returns>AccountViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByEmail(System.String)">
            <summary>
            Fetches the account record with the specified email.
            </summary>
            <param name="email">The email address associated with the account.</param>
            <returns>the first account object which matches the email</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByUsername(System.String)">
            <summary>
            Fetches the account record with the specified username.
            </summary>
            <param name="username">The AD username associated with the account.</param>
            <returns>the student account information</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.AdvancedSearch(System.Collections.Generic.IEnumerable{Gordon360.Models.ViewModels.AdvancedSearchViewModel},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Given a list of accounts, and search params, return all the accounts that match those search params.
            </summary>
            <param name="accounts">The accounts that should be searched, converted to an AdvancedSearchViewModel</param>
            <param name="firstname">The firstname search param</param>
            <param name="lastname">The lastname search param</param>
            <param name="major">The major search param</param>
            <param name="minor">The minor search param</param>
            <param name="hall">The hall search param</param>
            <param name="classType">The class type search param, e.g. 'Sophomore', 'Senior', 'Undergraduate Conferred'</param>
            <param name="preferredClassYear">The preferred class year search param</param>
            <param name="initialYear">The initial year range search param</param>
            <param name="finalYear">The final year range search param</param>
            <param name="homeCity">The home city search param</param>
            <param name="state">The state search param</param>
            <param name="country">The country search param</param>
            <param name="department">The department search param</param>
            <param name="building">The building search param</param>
            <param name="involvement">The involvement search param</param>
            <param name="gender">The gender search param</param>
            <returns>The accounts from the provided list that match the given search params</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountsToSearch(System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{Gordon360.Enums.AuthGroup},System.String)">
            <summary>
            Get the list of accounts a user can search, based on the types of accounts they want to search, their authorization, and whether they're searching sensitive info.
            </summary>
            <param name="accountTypes">A list of account types that will be searched: 'student', 'alumni', and/or 'facstaff'</param>
            <param name="authGroups">The authorization groups of the searching user, to decide what accounts they are permitted to search</param>
            <param name="homeCity">The home city search param, since it is considered sensitive info</param>
            <returns>The list of accounts that may be searched, converted to AdvancedSearchViewModels.</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAllBasicInfoAsync">
            <summary>
            Get basic info for all accounts
            </summary>
            <returns>BasicInfoViewModel of all accounts</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAllBasicInfoExceptAlumniAsync">
            <summary>
            Get basic info for all accounts except alumni
            </summary>
            <returns>BasicInfoViewModel of all accounts except alumni</returns>
        </member>
        <member name="T:Gordon360.Services.ActivityService">
            <summary>
            Service Class that facilitates data transactions between the ActivitiesController and the ACT_INFO database model.
            ACT_INFO is basically a copy of the ACT_CLUB_DEF domain model in TmsEPrd but with extra fields that we want to store (activity image, blurb etc...)
            Activity Info and ACtivity may be talked about interchangeably.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ActivityService.#ctor(Gordon360.Models.CCT.Context.CCTContext,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Gordon360.Utilities.ServerUtils)">
            <summary>
            Service Class that facilitates data transactions between the ActivitiesController and the ACT_INFO database model.
            ACT_INFO is basically a copy of the ACT_CLUB_DEF domain model in TmsEPrd but with extra fields that we want to store (activity image, blurb etc...)
            Activity Info and ACtivity may be talked about interchangeably.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ActivityService.Get(System.String)">
            <summary>
            Fetches a single activity record whose id matches the id provided as an argument
            </summary>
            <param name="activityCode">The activity code</param>
            <returns>ActivityViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivitiesForSessionAsync(System.String)">
            <summary>
            Fetches the Activities that are active during the session whose code is specified as parameter.
            </summary>
            <param name="sessionCode">The session code</param>
            <returns>ActivityViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivityTypesForSessionAsync(System.String)">
            <summary>
            Fetches the Activity types of activities that are active during the session whose code is specified as parameter.
            </summary>
            <param name="sessionCode">The session code</param>
            <returns>ActivityViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetAll">
            <summary>
            Fetches all activity records from storage.
            </summary>
            <returns>ActivityViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.IsOpen(System.String,System.String)">
            <summary>
            Checks to see if a specified activity is still open for this session
            Note: the way we know that an activity is open or closed is by the column END_DTE in MEMBERSHIP table
            When an activity is closed out, the END_DTE is set to the date on which the closing happened
            Otherwise, the END_DTE for all memberships of the activity will be null for that session
            </summary>
            <param name="activityCode">The activity code for the activity in question</param>
            <param name="sessionCode">Code of the session to check</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivitiesByStatus(System.String,System.Boolean)">
            <summary>
            Gets all activities for a session with an open status matching the `getOpen` param
            An activity is closed if it has a non-null `END_DTE`, and open otherwise
            </summary>
            <param name="sess_cde">The session code of the session to find activities for</param>
            <param name="getOpen">Whether to get open or closed activites</param>
            <returns>Collection of activities for the specified session with a status matching the `getOpen` param</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.Update(System.String,Gordon360.Models.ViewModels.InvolvementUpdateViewModel)">
            <summary>
            Updates the Activity Info 
            </summary>
            <param name="involvement">The activity info resource with the updated information</param>
            <param name="activityCode">The id of the activity info to be updated</param>
            <returns>The updated activity info resource</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.CloseOutActivityForSession(System.String,System.String)">
            <summary>
            Closes out a specific activity for a specific session
            </summary>
            <param name="activityCode">The activity code for the activity that will be closed</param>
            <param name="sess_cde">The session code for the session where the activity is being closed</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.OpenActivityForSession(System.String,System.String)">
            <summary>
            Open a specific activity for a specific session
            </summary>
            <param name="activityCode">The activity code for the activity that will be closed</param>
            <param name="sess_cde">The session code for the session where the activity is being closed</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.UpdateActivityImageAsync(Gordon360.Models.CCT.ACT_INFO,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Updates the image for the spcefied involvement
            </summary>
            <param name="involvement">The involvement to update the image of</param>
            <param name="image">The new image</param>
            <returns>The involvement with the updated image path</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.ResetActivityImage(System.String)">
            <summary>
            Reset the path for the activity image
            </summary>
            <param name="activityCode">The activity code</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.TogglePrivacy(System.String,System.Boolean)">
            <summary>
            change activty privacy
            </summary>
            <param name="activityCode">The activity code</param>
            <param name="isPrivate">activity private or not</param>
        </member>
        <member name="T:Gordon360.Services.ContentManagementService">
            <summary>
            Service class that facilitates data (specifically, site content) passing between the ContentManagementController and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ContentManagementService.#ctor(Gordon360.Models.CCT.Context.CCTContext)">
            <summary>
            Service class that facilitates data (specifically, site content) passing between the ContentManagementController and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ContentManagementService.GetBannerSlides">
            <summary>
            Retrieve all banner slides from the database
            </summary>
            <returns>An IEnumerable of the slides in the database</returns>
        </member>
        <member name="M:Gordon360.Services.ContentManagementService.AddBannerSlide(Gordon360.Models.ViewModels.BannerSlidePostViewModel,System.String,System.String)">
            <summary>
            Inserts a banner slide in the database and uploads the image to the local slider folder
            </summary>
            <param name="slide">The slide to add</param>
            <param name="serverURL">The url of the server that the image is being posted to.
            This is needed to save the image path into the database. The URL is different depending on where the API is running.
            The URL is trivial to access from the controller, but not available from within the service, so it has to be passed in.
            </param>
            <param name="contentRootPath">The path to the root of the web server's content, from which we can access the physical filepath where slides are uploaded.</param>
            <returns>The inserted slide</returns>
        </member>
        <member name="M:Gordon360.Services.ContentManagementService.DeleteBannerSlide(System.Int32)">
            <summary>
            Deletes a banner slide from the database and deletes the local image file
            </summary>
            <returns>The deleted slide</returns>
        </member>
        <member name="T:Gordon360.Services.DiningService">
            <summary>
            Service that allows for meal control
            </summary>
        </member>
        <member name="M:Gordon360.Services.DiningService.GetBalance(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="cardHolderID"></param>
            <param name="planID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.DiningService.GetDiningPlanInfo(System.Int32,System.String)">
            <summary>
            Get information about the selected plan for the student user
            </summary>
            <param name="cardHolderID">Student's Gordon ID</param>
            <param name="sessionCode">Current Session Code</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.EmailService">
            <summary>
            Service class to facilitate getting emails for members of an activity.
            </summary>
        </member>
        <member name="M:Gordon360.Services.EmailService.#ctor(Gordon360.Models.CCT.Context.CCTContext,Gordon360.Services.IMembershipService,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Service class to facilitate getting emails for members of an activity.
            </summary>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivity(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get a list of the emails for all members in the activity during the current session.
            </summary>
            <param name="activityCode">The code of the activity to get emails for.</param>
            <param name="sessionCode">Optionally, the session to get emails for. Defaults to the current session</param>
            <param name="participationTypes">The participation types to get emails of. If unspecified, gets emails of all participation types.</param>
            <returns>A list of emails (along with first and last name) associated with that activity</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.SendEmails(System.String[],System.String,System.String,System.String,System.String)">
            <summary>
            Send a email to a list of email addresses
            </summary>
            <param name="to_emails">All addresses to send this email to</param>
            <param name="from_email">The address this email is sent from</param>
            <param name="subject">Subject of the email to be sent</param>
            <param name="email_content">The content of the email to be sent</param>
            <param name="password">Password of the email sender</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.SendEmailToActivity(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send a email to members of an activity
            </summary>
            <param name="activityCode">The activity code to send this email to</param>
            <param name="sessionCode">The session of activity to select members from</param>
            <param name="from_email">The address this email is sent from</param>
            <param name="subject">Subject of the email to be sent</param>
            <param name="email_content">The content of the email to be sent</param>
            <param name="password">Password of the email sender</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.ErrorLogService">
            <summary>
            Service Class that facilitates data transactions between the ErrorLogController and the ERROR_LOG database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ErrorLogService.#ctor(Gordon360.Models.CCT.Context.CCTContext)">
            <summary>
            Service Class that facilitates data transactions between the ErrorLogController and the ERROR_LOG database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ErrorLogService.Add(Gordon360.Models.CCT.ERROR_LOG)">
            <summary>
            Adds a new error log to storage.
            </summary>
            <param name="error_log">The error log to be added</param>
            <returns>The newly added error_log object</returns>
        </member>
        <member name="M:Gordon360.Services.ErrorLogService.Log(System.String)">
            <summary>
            Adds a new error log to storage, after creating the timestamp.
            </summary>
            <param name="error_message">The error message for the error log to be added</param>
            <returns>The newly added error_log object</returns>
        </member>
        <member name="T:Gordon360.Services.EventService">
            <summary>
            Service that allows for event control
            </summary>
        </member>
        <member name="M:Gordon360.Services.EventService.#ctor(Gordon360.Models.CCT.Context.CCTContext,Microsoft.Extensions.Caching.Memory.IMemoryCache,Gordon360.Services.IAccountService)">
            <summary>
            Service that allows for event control
            </summary>
        </member>
        <member name="F:Gordon360.Services.EventService.AllEventsURL">
            URL to retrieve events from the 25Live API. 
            event_type_id parameter fetches only events of type 14 (Calendar Announcement) and 57 (Event).
            All other event types are not appropiate for the 360 events feed.
            end_after parameter  limits the request to events from the current academic year.
            state parameter fetches only confirmed events
        </member>
        <member name="M:Gordon360.Services.EventService.GetAllEvents">
            <summary>
            Access the memory stream created by the cached task and parse it into events
            Splits events with multiple repeated occurrences into individual records for each occurrence
            </summary>
            <returns>All events for the current academic year.</returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetPublicEvents">
            <summary>
            Select only events that are marked for Public promotion
            </summary>
            <returns>All Public Events</returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetCLAWEvents">
            <summary>
            Select only events that are Approved to give CLAW credit
            </summary>
            <returns>All CLAW Events</returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetEventsForStudentByTerm(System.String,System.String)">
            <summary>
            Returns all attended events for a student in a specific term
            </summary>
            <param name="username"> The student's AD Username</param>
            <param name="term"> The current term</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetFirstEventDate">
            <summary>
            Get the first date of events for the current period, for use in querying the 25Live API
            
            During the regular undergrad school year, this is the middle of August (roughly the start of the fall term)
            During the summer, this the middle of May (roughly the end of the spring term)
            </summary>
            <returns>The first date of events we care about, in 'yyyyMMdd' format (e.g. '20250815' for August 15th, 2025)</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.CheckIfHousingAdmin(System.String)">
            <summary>
            Calls a stored procedure that returns a row in the staff whitelist which has the given user id,
            if it is in the whitelist
            </summary>
            <param name="username"> The id of the person using the page </param>
            <returns> Whether or not the user is on the staff whitelist </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.DeleteApplication(System.Int32)">
            <summary>
            Deletes the application with given id,
            removing all rows that reference it.
            </summary>
            <param name="applicationID"> The id of the application to delete </param>
            <returns> Whether or not this was successful </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetAllApartmentHalls">
            <summary>
            Gets all names of apartment halls
            </summary>
            <returns> AN array of hall names </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetApplicationID(System.String,System.String)">
            <summary>
            Calls a stored procedure that tries to get the id of an the application that a given user is 
            applicant on for a given session
            </summary>
            <param name="username"> The student username to look for </param>
            <param name="sess_cde"> Session for which the application would be </param>
            <returns> 
            The id of the application or 
            null if the user is not on an application for that session 
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetEditorUsername(System.Int32)">
            <summary>
            Get the editor ID of a given application ID
            </summary>
            <param name="applicationID"> The application ID for which the editor ID would be </param>
            <returns>
            The id of the editor or
            null if the user is a member but not an editor of a given application
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.SaveApplication(System.String,System.String,System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentApplicantViewModel},System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentChoiceViewModel})">
             <summary>
             Saves student housing info
             - first, it creates a new row in the applications table and inserts the username of the primary applicant and a timestamp
             - second, it retrieves the application id of the application with the information we just inserted (because
             the database creates the application ID so we have to ask it which number it generated for it)
             - third, it inserts each applicant into the applicants table along with the application ID so we know
             which application on which they are an applicant
            
             </summary>
             <param name="sess_cde"> The current session code </param>
             <param name="editorUsername"> The student username of the student who is declared to be the editor of this application (retrieved from the JSON from the front end) </param>
             <param name="apartmentApplicants"> Array of JSON objects providing apartment applicants </param>
             <param name="apartmentChoices"> Array of JSON objects providing apartment hall choices </param>
             <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.EditApplication(System.String,System.String,System.Int32,System.String,System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentApplicantViewModel},System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentChoiceViewModel})">
             <summary>
             Edit an existings apartment application
             - first, it gets the EditorUsername from the database for the given application ID and makes sure that the student username of the current user matches that stored username
             - second, it gets an array of the applicants that are already stored in the database for the given application ID
             - third, it inserts each applicant that is in the 'newApplicantIDs' array but was not yet in the database
             - fourth, it removes each applicant that was stored in the database but was not in the 'newApplicantIDs' array
            
             </summary>
             <param name="username"> The student username of the user who is attempting to save the apartment application (retrieved via authentication token) </param>
             <param name="sess_cde"> The current session code </param>
             <param name="applicationID"> The application ID number of the application to be edited </param>
             <param name="newEditorUsername"> The student username of the student who is declared to be the editor of this application (retrieved from the JSON from the front end) </param>
             <param name="newApartmentApplicants"> Array of JSON objects providing apartment applicants </param>
             <param name="newApartmentChoices"> Array of JSON objects providing apartment hall choices </param>
             <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.ChangeApplicationEditor(System.String,System.Int32,System.String)">
             <summary>
             Changes the student user who has permission to edit the given application
            
             </summary>
             <returns>Whether or not all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetApartmentApplication(System.Int32,System.Boolean)">
            <param name="applicationID">application ID number of the apartment application</param>
            <param name="isAdmin">boolean indicating whether the current user is an admin, permits access to restricted information such as birth date</param>
            <returns>Apartment Application formatted for display in the UI</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetAllApartmentApplication">
            <returns>Array of ApartmentApplicationViewModels</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.ChangeApplicationDateSubmitted(System.Int32)">
            <summary>
            "Submit" an application by changing its DateSubmitted value to the date the submit button is succesfully clicked
            </summary>
            <param name="applicationID"> The application ID number of the application to be submitted </param>
            <returns>Returns whether the query succeeded</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.CreateRoomRangeAsync(Gordon360.Models.ViewModels.Housing.HallAssignmentRangeViewModel)">
            <summary>
            Creates a new hall assignment range if it does not overlap with any existing ranges
            </summary>
            <param name="model">The ViewModel that contains the hall ID and room range</param>
            <returns>The created Hall_Assignment_Ranges object</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.DeleteRoomRangeAsync(System.Int32)">
            <summary>
            Deletes a Room Range
            </summary>
            <param name="rangeId">The ID of the room range to delete</param>
            <returns> Returns if completed</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.AssignRaToRoomRangeAsync(System.Int32,System.String)">
            <summary>
            Assigns an RA to a room range if no RA is currently assigned
            </summary>
            <param name="rangeId">The ID of the room range</param>
            <param name="raId">The ID of the RA to assign</param>
            <returns>The created RA_Assigned_Ranges object</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.DeleteAssignmentAsync(System.Int32)">
            <summary>
            Deletes an RA range assignment
            </summary>
            <param name="rangeId">The Room range of the assignment to delete</param>
            <returns> Returns if completed</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetResidentRDAsync(System.String)">
            <summary>
            Retrieve the RD of the resident's hall based on their hall ID.
            </summary>
            <param name="hallId">The ID of the hall.</param>
            <returns>Returns the RD's details if found, otherwise null.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetRDsAsync">
            <summary>
            Retrieves a distinct list of all RDs with their IDs and names.
            </summary>
            <returns>
            Returns a list of RD_StudentsViewModel objects containing RD IDs and names.
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.CreateRdOnCallAsync(Gordon360.Models.ViewModels.RD_On_Call_Create)">
            <summary>
            Creates an RD's on-call assignment.
            </summary>
            <param name="OnCall">The ID of the RD</param>
            <returns>The created RD on-call assignment</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.UpdateRdOnCallAsync(System.Int32,Gordon360.Models.ViewModels.RD_On_Call_Create)">
            <summary>
            Updates an existing RD on-call record by its record ID.
            </summary>
            <param name="recordId">The unique identifier of the RD on-call record to update.</param>
            <param name="updatedOnCall">The updated RD on-call details.</param>
            <returns>
            Returns an updated RdOnCallGetView object if successful.
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.DeleteRDOnCallById(System.Int32)">
            <summary>
            Deletes an RD on-call record by its record ID.
            </summary>
            <param name="recordId">The unique identifier of the RD on-call record to delete.</param>
            <returns>
            Returns true if the record was successfully deleted.
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetRDOnCall">
            <summary>
            Retrieves the RD on call
            </summary>
            <returns>info for the RD.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetActiveRDOnCallsAsync">
            <summary>
            Retrieves a list of active RD on-call records where the end date is today or in the future.
            </summary>
            <returns>
            Returns a list of active RD on-call records
            If no active records are found, an empty list is returned.
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetResidentRAAsync(System.String,System.String)">
            <summary>
            Retrieves the RA assigned to a resident based on their room number and hall ID.
            </summary>
            <param name="hallId">The ID of the hall.</param>
            <param name="roomNumber">The resident's room number.</param>
            <returns>Returns the RA's details if found, otherwise throws an exception.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetAllRoomRangesAsync">
            <summary>
            Retrieves all room ranges.
            </summary>
            <returns>A list of room ranges.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetMissedRoomsAsync">
            <summary>
            Retrieves all rooms missing a range.
            </summary>
            <returns>A list of rooms.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetAllRAsAsync">
            <summary>
            Retrieves a list of all RAs.
            </summary>
            <returns>Returns a list of RA_StudentsViewModel containing information about each RA</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetRangeAssignmentsAsync">
            <summary>
            Retrieves the list of all assignments.
            </summary>
            <returns>Returns a list of all assignments</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetRangeAssignmentsByRAIdAsync(System.String)">
            <summary>
            Retrieves the list of range assignments for a given RA_ID.
            </summary>
            <param name="raId">The RA_ID of the assigned RA.</param>
            <returns>Returns a list of assigned ranges for the specified RA.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.SetPreferredContactMethodAsync(System.String,System.String)">
            <summary>
            Sets or updates an RA's preferred contact method
            </summary>
            <param name="raId">The ID of the RA</param>
            <param name="preferredContactMethod">The contact method (e.g., "Phone", "Teams")</param>
            <returns>True if the contact method was successfully set</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetPreferredContactAsync(System.String)">
            <summary>
            Retrieves the preferred contact information for an RA based on their contact preference.
            If the RA has a contact preference set, it will return either their phone number or a Microsoft Teams link 
            with their email embedded. If no preference exists, the method defaults to returning the RA's phone number.
            </summary>
            <param name="raId">The ID of the RA whose contact information is being requested.</param>
            <returns>A string containing the preferred contact information (phone number or Teams link) or a default 
            phone number if no preference is set.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetOnCallRAAsync(System.String)">
            <summary>
            Gets the on-call RA's ID for specified hall.
            </summary>
            <param name="Hall_ID">The ID of the hall</param>
            <returns>The ID of the on-call RA, or null if no RA is currently on call</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.RA_CheckinAsync(System.String[],System.String)">
             <summary>
             Checks an RA in
             </summary>
             <param name="Ra_ID">Id of the ra checking in</param>
            <param name="Hall_IDs">The Hall(s) the RA is checking into</param>
             <returns>true if RA checked in successfully</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetOnCallRAAllHallsAsync">
            <summary>
            Gets the on-call RAs for all halls.
            </summary>
            <returns>The RAs on call</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetOnCallRAHallsAsync(System.String)">
            <summary>
            Gets the on-call RA's current halls
            </summary>
            <param name="userName">The username of the ra</param>
            <returns>The RA's current halls</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.IsRAOnCallAsync(System.String)">
            <summary>
            Checks if an RA is currently on call.
            </summary>
            <param name="raId">The ID of the RA</param>
            <returns>True if the RA is on call, false otherwise</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.IsStudentResidentialAsync(System.Int32)">
            <summary>
            Checks if a student is residential
            </summary>
            <param name="idNum">The ID of the student</param>
            <returns>True if the student is a resident</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.CreateTaskAsync(Gordon360.Models.ViewModels.HallTaskViewModel)">
            <summary>
            Creates a new task for the given hall
            </summary>
            <param name="task">The HallTaskViewModel object containing necessary info</param>
            <returns>The created task</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.UpdateTaskAsync(System.Int32,Gordon360.Models.ViewModels.HallTaskViewModel)">
            <summary>
            Updates the task by the given ID
            </summary>
            <param name="taskID">The HallTaskViewModel object containing necessary info</param>
            <param name="task">The HallTaskViewModel object containing necessary info</param>
            <returns>The created task</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.DisableTaskAsync(System.Int32)">
            <summary>
            Disables a task
            </summary>
            <param name="taskID">The ID of the task to disable</param>
            <returns>True if disable</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.CompleteTaskAsync(System.Int32,System.String)">
            <summary>
            Marks a task completed
            </summary>
            <param name="taskID">the ID of the task to update</param>
            <param name="CompletedBy">The ID of the RA completing the task</param>
            <returns>True if completed</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.IncompleteTaskAsync(System.Int32)">
            <summary>
            Marks a task not completed
            </summary>
            <param name="taskID">the ID of the task to update</param>
            <returns>True if marked not completed</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetActiveTasksForHallAsync(System.String)">
            <summary>
            Gets the list of active tasks
            </summary>
            <param name="hallId">the ID of the hall to get tasks for</param>
            <returns>The list of tasks</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetTasksForHallAsync(System.String)">
            <summary>
            Gets the list of daily tasks for a hall
            </summary>
            <param name="hallId">the ID of the hall to get tasks for</param>
            <returns>The list of daily tasks</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.CreateStatusEventAsync(Gordon360.Models.ViewModels.RA_StatusEventsViewModel)">
            <summary>
            Creates a new status event for an RA's schedule
            </summary>
            <param name="status">The RA_StatusEventsViewModel object containing necessary info</param>
            <returns>The created status event</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.DeleteStatusEventAsync(System.Int32)">
            <summary>
            Deletes a status event for an RA's schedule
            </summary>
            <param name="statusID">The ID of the status event to delete</param>
            <returns>True if deleted</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.UpdateStatusEventAsync(System.Int32,Gordon360.Models.ViewModels.RA_StatusEventsViewModel)">
            <summary>
            Updates the RA status event by the given ID
            </summary>
            <param name="statusID">The ID of the status event to update</param>
            <param name="status">The RA_StatusEventsViewModel object containing necessary info</param>
            <returns>The updated status event</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetStatusEventsForRAAsync(System.String)">
            <summary>
            Gets the list of daily status events for an RA
            </summary>
            <param name="raID"> The ID of the RA</param>
            <returns>The list of daily status events</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetActiveStatusesByRAIdAsync(System.String)">
            <summary>
            Gets the active statuses for a given RA.
            </summary>
            <param name="raId">The ID of the RA.</param>
            <returns>A list of active statuses or a 404 if none exist.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetStuLifeContactByPhoneNameAsync(System.String)">
            <summary>
            Gets the Student Life contact by phone name.
            </summary>
            <param name="phoneName">The name of the phone contact.</param>
            <returns>The contact phone number or null if not found.</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.SetStuLifePhoneNumberAsync(System.String,System.String)">
            <summary>
            Updates or sets the Student Life phone number for a given name.
            </summary>
            <param name="PhoneName">The phone name</param>
            <param name="PhoneNumber">new number.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.hasFullPermissions(System.String)">
            <summary>
            Check if the user has full admin permissions in the system
            </summary>
            <param name="username">the UPN of the user</param>
            <returns>Boolean, whether the user has full admin permissions</returns>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.hasKioskPermissions(System.String)">
            <summary>
            Check if the user has kiosk permissions in the system
            </summary>
            <param name="username">the UPN of the user</param>
            <returns>Boolean, whether the user has kiosk permissions</returns>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.CreateMissingItemReport(Gordon360.Models.ViewModels.MissingItemReportViewModel,System.String)">
            <summary>
            Create a new missing item report, for the submitter in the details, or the authenticated user if that is null.
            </summary>
            <param name="reportDetails"></param>
            <param name="username"></param>
            <returns>Report ID - The ID of the report, generated by the database.</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceCreationException">If a general user attempts to create a report for someone else
            or the report can't be successfully saved</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.CreateActionTaken(System.Int32,Gordon360.Models.ViewModels.ActionsTakenViewModel,System.String)">
            <summary>
            Create an action taken for the missing item report with given id
            </summary>
            <param name="missingItemID">The id of the missing item to add an action to</param>
            <param name="ActionsTaken">The actions taken object to create</param>
            <param name="username">The username of the person making the request</param>
            <returns>actionTakenID - The ID of the action taken, generated by the database.</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceCreationException">If the requesting users account can't be found, or the action fails to save</exception>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If no missing item report exists with the given id</exception>
            <exception cref="T:System.UnauthorizedAccessException">If a non-admin user attempts to create an action on a report which doesn't
            belong to them</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.UpdateMissingItemReportAsync(System.Int32,Gordon360.Models.ViewModels.MissingItemReportViewModel,System.String)">
            <summary>
            Update a report with given id, to the given report detail data.
               NOTE: cannot modify associated guest user data, if this report is for guest.
            </summary>
            <param name="missingItemID">The id of the missing item to modify</param>
            <param name="reportDetails">The new object to update to</param>
            <param name="username">The username of the person making the request</param>
            <returns>None</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceCreationException">If not account can be found for the requesting user</exception>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the missing item report with given id cannot be found in the database</exception>
            <exception cref="T:System.UnauthorizedAccessException">If the report to be modified doesn't belong to the requesting user 
            (admins cannot edit reports of other people)</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.UpdateReportStatusAsync(System.Int32,System.String,System.String)">
            <summary>
            Update the status of a report with given id, to the given status message
                Status text must be in the set of allowed statuses, "Active", "Expired", "Deleted", "Found"
            </summary>
            <param name="missingItemID">The id of the missing item to modify</param>
            <param name="status">The new status</param>
            <param name="username">The username of the person making the request</param>
            <returns>None</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceCreationException">If not account can be found for the requesting user</exception>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the missing item report with given id cannot be found in the database</exception>
            <exception cref="T:System.UnauthorizedAccessException">If the report to be modified doesn't belong to the requesting user and the
            user is not an admin</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.UpdateReportAssociatedFoundItemAsync(System.Int32,System.String,System.String)">
            <summary>
                Update the associated found item for a missing item report
            </summary>
            <param name="id"></param>
            <param name="foundID"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetMissingItems(System.String,System.String)">
            <summary>
            Get the list of missing item reports for given user.
            </summary>
            <param name="requestedUsername">The username to get the data of, if allowed</param>
            <param name="requestorUsername">The username of the person making the request</param>
            <returns>an Enumerable of Missing Item Reports containing all missing item reports</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If a user requests reports they are not permitted to access</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetMissingItemsAll(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Get all missing item reports
            Throw unauthorized access exception if the user doesn't have admin permissions
            </summary>
            <param name="color">The selected color for filtering reports</param>
            <param name="category">The selected category for filtering reports</param>
            <param name="keywords">The selected keywords for filtering by keywords</param>
            <param name="lastCheckedDate">The last checked date to filter by, only returning reports 
            last checked before this date</param>
            <param name="status">The selected status for filtering reports</param>
            <param name="username">The username of the person making the request</param>
            <param name="lastId">The ID of the last fetched report to start from for pagination</param>
            <param name="pageSize">The size of the page to fetch for pagination</param>
            <returns>An enumerable of Missing Item Reports, from the Missing Item Data view</returns>
            <exception cref="T:System.UnauthorizedAccessException">If a user without admin permissions attempts to use</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetMissingItem(System.Int32,System.String)">
            <summary>
            Gets a Missing by id, only allowed if it belongs to the username, or the user is an admin
            </summary>
            <param name="missingItemID">The ID of the missing item</param>
            <param name="username">The username of the person making the request</param>
            <returns>A Missing Item Report object, or null if no item matches the id</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the report with given ID doesn't exist or the user
            doesn't have permissions to read it</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetActionsTaken(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of actions taken on a missing item report with given ID, 
            general users only allowed to get public actions on their own reports
            </summary>
            <param name="missingID">The ID of the missing item report to get the actions of</param>
            <param name="username">The username of the person making the request</param>
            <param name="getPublicOnly">Only get actions marked as public.  Default false.</param>
            <param name="elevatedPermissions">Signal to the function that user elevated authorization has already been confirmed</param>
            <returns>An ActionsTaken[], or null if no item matches the id</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">Attemps by a non-admin user to get actions for 
            a report which doesn't belong to them will yield an ResourceNotFoundException</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetMissingItemsCount(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Service method to retrieve counts of missing item reports.
            </summary>
            <param name="username"></param>
            <param name="status"></param>
            <param name="color"></param>
            <param name="category"></param>
            <param name="keywords"></param>
            <returns>Count of missing items after applying filters</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException"></exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.CreateFoundItem(Gordon360.Models.ViewModels.FoundItemViewModel,System.String)">
            <summary>
            Create a new found item
            </summary>
            <param name="FoundItemDetails">The details of the report to create</param>
            <param name="username">The username of the person making the request</param>
            <returns>String - The ID tag number of the created found item</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">Attemps by a non-admin user to create found items will
            throw a not found exception</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Gordon360.Services.LostAndFoundService.CreateFoundActionTaken(System.String,Gordon360.Models.ViewModels.FoundActionsTakenViewModel,System.String)" -->
        <member name="M:Gordon360.Services.LostAndFoundService.UpdateFoundItemAsync(System.String,Gordon360.Models.ViewModels.FoundItemViewModel,System.String)">
            <summary>
            Update a found item with given id, to the given report detail data.
            </summary>
            <param name="itemID">The id of the found item to modify</param>
            <param name="itemDetails">The new object to update to</param>
            <param name="username">The username of the person making the request</param>
            <returns>None</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceCreationException">If not account can be found for the requesting user</exception>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the found item report with given id cannot be found in the database</exception>
            <exception cref="T:System.UnauthorizedAccessException">If the report to be modified doesn't belong to the requesting user</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.FoundDataHelper(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Helper function to edit FoundGuest table
            </summary>
            <param name="guestFirstName">The guest first name</param>
            <param name="guestLastName">The guest last name</param>
            <param name="guestPhone">The guest phone number</param>
            <param name="guestEmail">The guest phone number</param>
            <param name="username">The username of the guest</param>
            <param name="DBGuestID">The ID of the guest</param>
            <returns>
            guestID, newID
            </returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the found item report with given id cannot be found in the database</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.UpdateFoundStatusAsync(System.String,System.String,System.String)">
            <summary>
            Update the status of a found report with given id, to the given status message
                Status text must be in the set of allowed statuses, "Active", "Expired", "Deleted", "Found"
            </summary>
            <param name="foundItemID">The id of the found item to modify</param>
            <param name="status">The new status</param>
            <param name="username">The username of the person making the request</param>
            <returns>None</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceCreationException">If not account can be found for the requesting user</exception>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the found item report with given id cannot be found in the database</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.UpdateFoundAssociatedMissingReportAsync(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
                Update the associated missing report for the found item
            </summary>
            <param name="foundItemID">The id of the found item to modify</param>
            <param name="missingReportID"></param>
            <param name="username">The username of the person making the request</param>
            <returns>None</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceCreationException">If not account can be found for the requesting user</exception>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the found item with given id cannot be found in the database</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetFoundItem(System.String,System.String)">
            <summary>
            Gets a found item by ID, only allowed for admin users
            </summary>
            <param name="foundItemID">The ID of the found item</param>
            <param name="username">The username of the person making the request</param>
            <returns>A Found Item object</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">If the report with given ID doesn't exist or the user
            doesn't have permissions to read it</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetFoundItemsByOwner(System.String,System.String)">
            <summary>
            Get the list of found items assigned to the specified owner.
            </summary>
            <param name="requestedUsername">
            The username (GordonID) of the owner whose found items are requested.
            </param>
            <param name="requestorUsername">
            The username (GordonID) of the user making the request.
            </param>
            <returns>
            An enumerable of FoundItemViewModel objects matching the owner.
            </returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">
            Thrown if a non-admin tries to retrieve found items for a user other than themselves.
            </exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetFoundItemsAll(System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get all found items
            Throw unauthorized access exception if the user doesn't have admin permissions
            </summary>
            <param name="color">The selected color for filtering items</param>
            <param name="category">The selected category for filtering items</param>
            <param name="ID">The selected tag number/id for filtering by tag number</param>
            <param name="keywords">The selected keywords for filtering by keywords</param>
            <param name="status">The selected status for filtering items</param>
            <param name="username">The username of the person making the request</param>
            <param name="latestDate">The latest date that should be accepted for a query</param>
            <returns>An enumerable of Found Items, from the Found Item Data view</returns>
            <exception cref="T:System.UnauthorizedAccessException">If a user without admin permissions attempts
            to use</exception>
        </member>
        <member name="M:Gordon360.Services.LostAndFoundService.GetFoundItemsCount(System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Service method to retrieve counts of found items.
            </summary>
            <param name="username"></param>
            <param name="latestDate"></param>
            <param name="status"></param>
            <param name="color"></param>
            <param name="category"></param>
            <param name="keywords"></param>
            <returns>Count of found items after applying filters</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException"></exception>
        </member>
        <member name="T:Gordon360.Services.MembershipRequestService">
            <summary>
            Service class to facilitate data transactions between the MembershipRequestController and the database
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.#ctor(Gordon360.Models.CCT.Context.CCTContext,Gordon360.Services.IMembershipService,Gordon360.Services.IAccountService)">
            <summary>
            Service class to facilitate data transactions between the MembershipRequestController and the database
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.AddAsync(Gordon360.Models.CCT.RequestUploadViewModel)">
            <summary>
            Generate a new request to join an activity at a participation level higher than 'Guest'
            </summary>
            <param name="membershipRequestUpload">The membership request object</param>
            <returns>The new request object as a RequestView</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.ApproveAsync(System.Int32)">
            <summary>
            Approves the request with the specified ID.
            </summary>
            <param name="requestID">The ID of the request to be approved</param>
            <returns>The approved request as a RequestView</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.DenyAsync(System.Int32)">
            <summary>
            Denies the membership request object whose id is given in the parameters
            </summary>
            <param name="requestID">The membership request id</param>
            <returns>A RequestView object of the denied request</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.SetPendingAsync(System.Int32)">
            <summary>
            Denies the membership request object whose id is given in the parameters
            </summary>
            <param name="requestID">The membership request id</param>
            <returns>A RequestView object of the now pending request</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.DeleteAsync(System.Int32)">
            <summary>
            Delete the membershipRequest object whose id is given in the parameters 
            </summary>
            <param name="requestID">The membership request id</param>
            <returns>A copy of the deleted request as a RequestView</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Get(System.Int32)">
            <summary>
            Get the membership request object whose Id is specified in the parameters.
            </summary>
            <param name="requestID">The membership request id</param>
            <returns>The matching RequestView</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetAll">
            <summary>
            Fetches all the membership request objects from the database.
            </summary>
            <returns>RequestView IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequests(System.String,System.String,System.String)">
            <summary>
            Fetches all the membership requests associated with this activity
            </summary>
            <param name="activityCode">The activity id</param>
            <param name="sessionCode">The session code to filter by</param>
            <param name="requestStatus">The request status to filter by</param>
            <returns>A RequestView IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequestsByUsername(System.String)">
            <summary>
            Fetches all the membership requests associated with this student
            </summary>
            <param name="username">The AD Username of the user</param>
            <returns>A RequestView IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.UpdateAsync(System.Int32,Gordon360.Models.CCT.RequestUploadViewModel)">
            <summary>
            Update an existing membership request object
            </summary>
            <param name="requestID">The membership request id</param>
            <param name="membershipRequest">The newly modified membership request</param>
            <returns>A RequestView object of the updated request</returns>
        </member>
        <member name="T:Gordon360.Services.MembershipService">
            <summary>
            Service Class that facilitates data transactions between the MembershipsController and the Membership database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipService.#ctor(Gordon360.Models.CCT.Context.CCTContext,Gordon360.Services.IAccountService,Gordon360.Services.IActivityService)">
            <summary>
            Service Class that facilitates data transactions between the MembershipsController and the Membership database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMemberships(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Fetches the memberships associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="activityCode">Optional activity code filter</param>
            <param name="username">Optional username filter</param>
            <param name="sessionCode">Optional session code, defaults to current session. Use "*" for all sessions</param>
            <param name="participationTypes">Optional filter for involvement participation types (MEMBR, ADV, LEAD, GUEST, GRP_ADMIN)</param>
            <returns>An IEnumerable of the matching MembershipView objects</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetSpecificMembership(System.Int32)">
            <summary>	
            Fetch the membership whose id is specified by the parameter	
            </summary>	
            <param name="membershipID">The membership id</param>	
            <returns>The found membership as a MembershipView</returns>	
        </member>
        <member name="M:Gordon360.Services.MembershipService.AddAsync(Gordon360.Models.ViewModels.MembershipUploadViewModel)">
            <summary>
            Adds a new Membership record to storage. Since we can't establish foreign key constraints and relationships on the database side,
            we do it here by using the validateMembership() method.
            </summary>
            <param name="membershipUpload">The membership to be added</param>
            <returns>The newly added membership object as a MembershipView</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Delete(System.Int32)">
            <summary>
            Delete the membership whose id is specified by the parameter.
            </summary>
            <param name="membershipID">The membership id</param>
            <returns>The membership that was just deleted as a MembershipView</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.UpdateAsync(System.Int32,Gordon360.Models.ViewModels.MembershipUploadViewModel)">
            <summary>
            Updates the membership whose id is given as the first parameter to the contents of the second parameter.
            </summary>
            <param name="membershipID">The id of the membership to update</param>
            <param name="membership">The updated membership</param>
            <returns>The newly modified membership as a MembershipView object</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.SetGroupAdminAsync(System.Int32,System.Boolean)">
            <summary>
            Switches the group-admin property of the person whose membership id is given
            </summary>
            <param name="membershipID">The corresponding membership object</param>
            <param name="isGroupAdmin">The new value of group admin</param>
            <returns>The newly modified membership as a MembershipView object</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.SetPrivacyAsync(System.Int32,System.Boolean)">
            <summary>
            Switches the privacy property of the person whose membership id is given
            </summary>
            <param name="membershipID">The membership object passed</param>
            <param name="isPrivate">The new value of privacy</param>
            <returns>The newly modified membership as a MembershipView object</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.ValidateMembership(Gordon360.Models.ViewModels.MembershipUploadViewModel)">
            <summary>
            Helper method to Validate a membership
            </summary>
            <param name="membership">The membership to validate</param>
            <returns>True if the membership is valid. Throws an Exception if not. Exception is caught in an Exception Filter</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.IsGroupAdmin(System.String)">
            <summary>	
            Determines whether or not the given user is a Group Admin of some activity	
            </summary>
            <param name="username">Username of the user to check</param>	
            <returns>true if student is a Group Admin, else false</returns>	
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMembershipViewById(System.Int32)">
            <summary>	
            Finds the matching MembershipView object from an existing MEMBERSHIP object
            </summary>
            <param name="membershipId">The MEMBERSHIP to match on MembershipID</param>	
            <returns>The found MembershipView object corresponding to the MEMBERSHIP by ID</returns>	
        </member>
        <member name="M:Gordon360.Services.MembershipService.RemovePrivateMemberships(System.Collections.Generic.IEnumerable{Gordon360.Models.CCT.MembershipView},System.String)">
            <summary>
            Filters out memberships that are private with respect to the given viewer
            </summary>
            <param name="memberships">Enumerable of memberships to filter</param>
            <param name="viewerUsername">username of viewer</param>
            <returns>The membership enumerable with private memberships removed</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.Get(System.Int32)">
            <summary>
            Gets a news item entity by id
            NOTE: Also a helper method, hence why it returns a StudentNews model
            rather than a StudentNewsViewModel - must be casted as the latter in its own
            controller
            </summary>
            <param name="newsID">The SNID (id of news item)</param>
            <returns>The news item</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.GetNewsPersonalUnapprovedAsync(System.String)">
            <summary>
            Gets unapproved unexpired news submitted by user.
            </summary>
            <param name="username">username</param>
            <returns>Result of query</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.SubmitNews(Gordon360.Models.MyGordon.StudentNews,System.String)">
            <summary>
            Adds a news item record to storage.
            </summary>
            <param name="newsItem">The news item to be added</param>
            <param name="username">username</param>
            <returns>The newly added Membership object</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.DeleteNews(System.Int32)">
            <summary>
            (Service) Deletes a news item from the database
            </summary>
            <param name="newsID">The id of the news item to delete</param>
            <returns>The deleted news item</returns>
            <remarks>The news item must be authored by the user and must not be expired</remarks>
        </member>
        <member name="M:Gordon360.Services.NewsService.EditPosting(System.Int32,Gordon360.Models.ViewModels.StudentNewsUploadViewModel)">
            <summary>
            (Service) Edits a news item in the database
            </summary>
            <param name="newsID">The id of the news item to edit</param>
            <param name="newData">The news object that contains updated values</param>
            <returns>The updated news item's view model</returns>
            <remarks>The news item must be authored by the user and must not be expired and must be unapproved</remarks>
        </member>
        <member name="M:Gordon360.Services.NewsService.EditImage(System.Int32,System.String)">
            <summary>
            (Service) Edits the image of a news item in the database
            </summary>
            <param name="newsID">The id of the news item to edit</param>
            <param name="newImageData">The news image object that contains the updated image value</param>
            <returns>The updated news item's view model</returns>
            <remarks>The news item must be authored by the user and must not be expired and must be unapproved</remarks>
        </member>
        <member name="M:Gordon360.Services.NewsService.VerifyUnapproved(Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            Helper method to verify that a given news item has not yet been approved
            </summary>
            <param name="newsItem">The news item to verify</param>
            <returns>true if unapproved, otherwise throws some kind of meaningful exception</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.VerfiyApproved(Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            Helper method to verify that a given news item has already been approved
            </summary>
            <param name="newsItem">The news item to verify</param>
            <returns>true if approved, otherwise throws some kind of meaningful exception</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.VerifyUnexpired(Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            Helper method to verify that a given news item has not expired 
            (see documentation for expiration definition)
            </summary>
            <param name="newsItem">The news item to verify</param>
            <returns>true if unexpired, otherwise throws some kind of meaningful exception</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.ValidateNewsItem(Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            Helper method to validate a news item
            </summary>
            <param name="newsItem">The news item to validate</param>
            <returns>True if valid. Throws ResourceNotFoundException if not. Exception is caught in an Exception Filter</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.VerifyAccount(System.String)">
            <summary>
            Verifies that a student account exists
            </summary>
            <param name="username">The AD Username of the student</param>
            <returns>true if account exists, ResourceNotFoundException if null</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetStudentProfileByUsername(System.String)">
            <summary>
            get student profile info
            </summary>
            <param name="username">username</param>
            <returns>StudentProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetFacultyStaffProfileByUsername(System.String)">
            <summary>
            get faculty staff profile info
            </summary>
            <param name="username">username</param>
            <returns>FacultyStaffProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetAlumniProfileByUsername(System.String)">
            <summary>
            get alumni profile info
            </summary>
            <param name="username">username</param>
            <returns>AlumniProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetMailboxCombination(System.String)">
            <summary>
            get mailbox information (contains box combination)
            </summary>
            <param name="username">The current user's username</param>
            <returns>MailboxCombinationViewModel with the combination</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetBirthdate(System.String)">
            <summary>
            get a user's birthday
            </summary>
            <param name="username">The username of the person to get the birthdate of</param>
            <returns>Date the user's date of birth, if available, or a default of 1/1/1800.</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetAdvisorsAsync(System.String)">
            <summary>
            get advisors for particular student
            </summary>
            <param name="username">AD username</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetCliftonStrengths(System.Int32)">
            <summary> Gets the clifton strengths of a particular user </summary>
            <param name="id"> The id of the user for which to retrieve info </param>
            <returns> Clifton strengths of the given user. </returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.ToggleCliftonStrengthsPrivacyAsync(System.Int32)">
            <summary>
            Toggles the privacy of the Clifton Strengths data associated with the given id
            </summary>
            <param name="id">ID of the user whose Clifton Strengths privacy is toggled</param>
            <returns>The new privacy value</returns>
            <exception cref="T:Gordon360.Exceptions.ResourceNotFoundException">Thrown when the given ID doesn't match any Clifton Strengths rows</exception>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetEmergencyContact(System.String)">
            <summary> Gets the emergency contact information of a particular user </summary>
            <param name="username"> The username of the user for which to retrieve info </param>
            <returns> Emergency contact information of the given user. </returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetPhotoPathAsync(System.String)">
            <summary>
            Get photo path for profile
            </summary>
            <param name="username">AD username</param>
            <returns>PhotoPathViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetCustomUserInfo(System.String)">
            <summary>
            Fetches a single profile whose username matches the username provided as an argument
            </summary>
            <param name="username">The username</param>
            <returns>ProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateProfileImageAsync(System.String,System.String,System.String)">
            <summary>
            Sets the path for the profile image.
            </summary>
            <param name="username">AD Username</param>
            <param name="path"></param>
            <param name="name"></param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateCustomProfileAsync(System.String,System.String,Gordon360.Models.CCT.CUSTOM_PROFILE)">
            <summary>
            Sets the component of the Custom_profile.
            </summary>
            <param name="username">The username</param>
            <param name="type"></param>
            <param name="content"></param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateMobilePrivacyAsync(System.String,System.String)">
            <summary>
            privacy setting of mobile phone.
            </summary>
            <param name="username">AD Username</param>
            <param name="value">Y or N</param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateMobilePhoneNumberAsync(System.String,System.String)">
            <summary>
            mobile phone number setting
            </summary>
            <param name="username"> The username for the user whose phone is to be updated </param>
            <param name="newMobilePhoneNumber">The new number to update the user's phone number to</param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateOfficeLocationAsync(System.String,System.String,System.String)">
            <summary>
            office location setting
            </summary>
            <param name="username"> The username for the user whose office location is to be updated </param>
            <param name="newBuilding">The new building location to update the user's office location to</param> 
            <param name="newRoom">The new room to update the user's office room to</param>
            <returns>updated fac/staff profile if found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateOfficeHoursAsync(System.String,System.String)">
            <summary>
            office hours setting
            </summary>
            <param name="username"> The username for the user whose office hours is to be updated </param>
            <param name="newHours">The new hours to update the user's office hours to</param>
            <returns>updated fac/staff profile if found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateMailStopAsync(System.String,System.String)">
            <summary>
            mail location setting
            </summary>
            <param name="username"> The username for the user whose mail location is to be updated </param>
            <param name="newMail">The new mail location to update the user's mail location to</param>
            <returns>updated fac/staff profile if found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateImagePrivacyAsync(System.String,System.String)">
            <summary>
            privacy setting user profile photo.
            </summary>
            <param name="username">AD Username</param>
            <param name="value">Y or N</param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetGraduationInfo(System.String)">
            <summary>
            Get graduation information for a student
            </summary>
            <param name="username">The username of the student</param>
            <returns>GraduationViewModel containing graduation details</returns>
        </member>
        <member name="M:Gordon360.Services.RecIM.MatchService.GetMatchForTeamByMatchID(System.Int32)">
            <summary>
            this function is used because ASP somehow refuses to cast IEnumerables or recognize IEnumerables
            within other queries. The only solution is to return each individual instance and have the original
            query handle the enumeration.
            </summary>
        </member>
        <member name="M:Gordon360.Services.RecIM.ParticipantService.GetUnaffiliatedAccountByUsername(System.String)">
            <summary>
            Fetches the account record with the specified username. Inclusive of non-gordon accounts made by Rec-IM
            </summary>
            <param name="username">The AD username associated with the account.</param>
            <returns>account information</returns>
        </member>
        <member name="M:Gordon360.Services.RecIM.SeriesService.ScheduleMatchesAsync(System.Int32,Gordon360.Models.ViewModels.RecIM.UploadScheduleRequest)">
            <summary>
            Scheduler does not currently handle overlaps
            eventually:
            - ensure that matches that occur within 1 hour do not share the same surface
               unless they're in the same series
            </summary>
            <param name="seriesID"></param>
            <returns>Created Match objects</returns>
        </member>
        <member name="M:Gordon360.Services.RecIM.SeriesService.ScheduleDoubleElimination(System.Int32)">
            <summary>
            Current double elimination autoscheduling will consider "play-in" as a "play-in" tournament
            Losers of the play in do not count for the double elimination bracket.
            </summary>
        </member>
        <member name="M:Gordon360.Services.RecIM.SeriesService.ScheduleElimRoundAsync(System.Collections.Generic.IEnumerable{Gordon360.Models.CCT.SeriesTeam},System.Boolean)">
            <summary>
            Goal of this function is to generate a single elimination round.
            On the first possible round, this would imply handling teams with byes to ensure
            that the second round will be in a power of 2 (so that no further rounds need byes). 
            
            These functions may need to be modified later as there may be more efficient ways to handle scheduling
            with the context that surfaces need to be booked ahead of time on 25Live
            </summary>
            <returns>Matches created as well as number of teams in the next round</returns>
        </member>
        <member name="T:Gordon360.Services.ScheduleService">
            <summary>
            Service Class that facilitates data transactions between the SchedulesController and the Schedule part of the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ScheduleService.#ctor(Gordon360.Models.CCT.Context.CCTContext,Gordon360.Services.ISessionService)">
            <summary>
            Service Class that facilitates data transactions between the SchedulesController and the Schedule part of the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ScheduleService.GetAllCoursesAsync(System.String)">
            <summary>
            Fetch the session item whose id specified by the parameter
            </summary>
            <param name="username">The AD Username of the user</param>
            <returns>CoursesBySessionViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ScheduleService.GetAllInstructorCoursesAsync(System.String)">
            <summary>
            Fetch the classes that are taught by this user
            </summary>
            <param name="username">The AD Username of the user</param>
            <returns>CoursesBySessionViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ServicesExtensions.Add360Services(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add our Gordon 360 Services as scoped services to the dependency injection container.
            </summary>
            <param name="services">Service container</param>
            <returns>The service container that has our services added.</returns>
        </member>
        <member name="T:Gordon360.Services.SessionService">
            <summary>
            Service class to facilitate data transactions between the Controller and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.SessionService.#ctor(Gordon360.Models.CCT.Context.CCTContext)">
            <summary>
            Service class to facilitate data transactions between the Controller and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.SessionService.Get(System.String)">
            <summary>
            Get the session record whose sesssion code matches the parameter.
            </summary>
            <param name="sessionCode">The session code.</param>
            <returns>A SessionViewModel if found, null if not found.</returns>
        </member>
        <member name="M:Gordon360.Services.SessionService.GetAll">
            <summary>
            Fetches all the session records from the database.
            </summary>
            <returns>A SessionViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.StudentEmploymentService.GetEmploymentAsync(System.String)">
            <summary>
            get Student Employment records of given user
            </summary>
            <param name="username">AD Username of user to get employment</param>
            <returns>VictoryPromiseViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.VictoryPromiseService.GetVPScoresAsync(System.String)">
            <summary>
            get victory promise scores
            </summary>
            <param name="username">id</param>
            <returns>VictoryPromiseViewModel if found, null if not found</returns>
        </member>
        <member name="T:Gordon360.Static.Methods.Helpers">
            <summary>
            Service class for methods that are shared between all services.
            </summary>
        </member>
        <member name="M:Gordon360.Static.Methods.Helpers.GetCurrentSession(Gordon360.Models.CCT.Context.CCTContext)">
            <summary>
            Helper method that gets the current session we are in.
            </summary>
            <returns>The session code of the current session</returns>
        </member>
        <member name="M:Gordon360.Utilities.ImageUtils.DeleteImage(System.String)">
            <summary>
            Deletes an image from the filesystem, if there is one.
            </summary>
            <param name="imagePath">The path to which the image belonged.</param>
        </member>
        <member name="M:Gordon360.Utilities.ImageUtils.RetrieveImageFromPath(System.String)">
            <summary>
            Takes an image path and returns the data of the image at that path.
            If given path is null it returns an empty string.
            </summary>
            <param name="imagePath">The path to the image</param>
            <returns>The base64 data of the image</returns>
        </member>
        <member name="M:Gordon360.Utilities.ImageUtils.UploadImage(System.String,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Uploads a news image
            </summary>
            <remarks>
            Takes base64 image data and writes it to an image file. Note that if the target path
            already has a file, the method will overwrite it (which gives no errors)
            </remarks>
            <param name="imagePath">The path to which the image belongs</param>
            <param name="imageData">The base64 image data to be stored</param>
            <param name="format">The format to save the image as. Defaults to Jpeg</param>
        </member>
        <member name="M:Gordon360.Utilities.ImageUtils.UploadImageAsync(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads image from HTTP FormFile
            </summary>
            <remarks>
            Takes image data and writes it to an image file. Note that if the target path
            already has a file, the method will overwrite it (which gives no errors)
            </remarks>
            <param name="imagePath">The path to which the image belongs</param>
            <param name="imageData">The image data to be stored</param>
        </member>
        <member name="M:Gordon360.Utilities.ImageUtils.GetBase64ImageDataFromPath(System.String)">
            <summary>
            Takes a filepath for an image, navigates to it, collects the raw data
            of the file and converts it to base64 format. 
            </summary>
            <param name="imagePath">The path to the image</param>
            <returns>The base64 content of the image</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PhoneNumberRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
