<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gordon360</name>
    </assembly>
    <members>
        <member name="M:Gordon360.ApiControllers.AdminsController.GetAll">
            <summary>
            Get all admins
            </summary>
            <returns>
            A list of all admins
            </returns>
            <remarks>
            Server makes call to the database and returns all admins
            </remarks>
        </member>
        <member name="M:Gordon360.ApiControllers.AdminsController.GetByGordonId(System.String)">
            <summary>
            Get a specific admin
            </summary>
            <returns>
            The specific admin
            </returns>
            <remarks>
            Server makes call to the database and returns the specific admin
            </remarks>
        </member>
        <member name="M:Gordon360.ApiControllers.AdminsController.Post(Gordon360.Models.ADMIN)">
            <summary>Create a new admin to be added to database</summary>
            <param name="admin">The admin item containing all required and relevant information</param>
            <returns></returns>
            <remarks>Posts a new admin to the server to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.ApiControllers.AdminsController.Delete(System.Int32)">
            <summary>Delete an existing admin</summary>
            <param name="id">The identifier for the admin to be deleted</param>
            <remarks>Calls the server to make a call and remove the given admin from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ContentManagementController.GetSliderContent">
            <summary>Get all the slider content for the dashboard slider</summary>
            <returns>A list of all the slides for the slider</returns>
            <remarks>Queries the database for all entries in slider table</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Get">
            <summary>
            Gets all Membership Request Objects
            </summary>
            <returns>List of all requests for membership</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Get(System.Int32)">
            <summary>
             Gets a specific Membership Request Object
            </summary>
            <param name="id">The ID of the membership request</param>
            <returns>A memberships request with the specified id</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.GetMembershipsRequestsForActivity(System.String)">
            <summary>
            Gets the memberships requests for the specified activity
            </summary>
            <param name="id">The activity code</param>
            <returns>All membership requests associated with the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.GetMembershipsRequestsForStudent(System.String)">
            <summary>
            Gets the memberships requests for the specified student
            </summary>
            <param name="id">The student id</param>
            <returns>All membership requests associated with the student</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Post(Gordon360.Models.REQUEST)">
            <summary>
            Creates a new membership request
            </summary>
            <param name="membershipRequest">The request to be added</param>
            <returns>The added request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Put(System.Int32,Gordon360.Models.REQUEST)">
            <summary>
            Updates a membership request
            </summary>
            <param name="id">The membership request id</param>
            <param name="membershipRequest">The updated membership request object</param>
            <returns>The updated request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.ApproveRequest(System.Int32)">
            <summary>
            Sets a membership request to Approved
            </summary>
            <param name="id">The id of the membership request in question.</param>
            <returns>If successful: THe updated membership request wrapped in an OK Http status code.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.DenyRequest(System.Int32)">
            <summary>
            Sets the membership request to Denied
            </summary>
            <param name="id">The id of the membership reuqest in question.</param>
            <returns>If successful: THe updated membership request wrapped in an OK Http status code.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipRequestController.Delete(System.Int32)">
            <summary>
            Delets a membership request
            </summary>
            <param name="id">The id of the membership request to delete</param>
            <returns>The deleted object</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.Get">
            <summary>Get the info of currently logged in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.GetUserProfile(System.String)">
            <summary>Get public profile info for a user</summary>
            <param name="username">username of the profile info</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.getImg">
            <summary>Get the profile image of currently logged in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.PostImage">
            <summary>
            Set an image for profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.ResetImage">
            <summary>
            Reset the profile Image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.UpdateLink(System.String,Gordon360.Models.CUSTOM_PROFILE)">
            <summary>
            Update the profile social media links
            </summary>
            <param name="type">The type of social media</param>
            <param name="path">The path of the links</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.UpdateMobilePrivacy(System.Boolean)">
            <summary>
            Update privacy of mobile phone number
            </summary>
            <param name="p">private or not</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ProfilesController.UpdateImagePrivacy(System.Int32)">
            <summary>
            Update privacy of profile image
            </summary>
            <param name="p">private or not</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ParticipationsController.Get">
            <summary>Get all the roles a person may have within an activity</summary>
            <returns>A list of all the roles and their coresponding acronyms</returns>
            <remarks>Queries the database for all the roles that are valid</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ParticipationsController.Get(System.String)">
            <summary>Get a single role and the information about it</summary>
            <param name="id">The identifier for a single role</param>
            <returns>The information about the specified role</returns>
            <remarks>Queries the database and returns information about one particular role</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ParticipationsController.GetLeaderRoles">
            <summary>
            Get the participation levels that are considered to be leadership positions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ParticipationsController.GetTranscriptWorthyRoles">
            <summary>
            GEt the participation levels that are considered to be leadership positions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.SessionsController.Get">
            <summary>Get a list of all sessions</summary>
            <returns>All sessions within the database</returns>
            <remarks>Queries the database for all sessions, current and past</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SessionsController.Get(System.String)">
            <summary>Get one specific session specified by the id in the URL string</summary>
            <param name="id">The identifier for one specific session</param>
            <returns>The information about one specific session</returns>
            <remarks>Queries the database regarding a specific session with the given identifier</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.SessionsController.GetCurrentSession">
            <summary>
            Gets the current active session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.Get">
            <summary>
            Get all available activities
            </summary>
            <returns>All the activities in the databse</returns>
            <remarks></remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.Get(System.String)">
            <summary>Get a single activity based upon the string id entered in the URL</summary>
            <param name="id">An identifier for a single activity</param>
            <returns></returns>
            <remarks>Get a single activity from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetActivitiesForSession(System.String)">
            <summary>Gets the activities taking place during a given session</summary>
            <param name="id">The session identifier</param>
            <returns>A list of all activities that are active during the given session determined by the id parameter</returns>
            <remarks>Queries the database to find which activities are active during the session desired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetActivityTypesForSession(System.String)">
            <summary>Gets the different types of activities taking place during a given session</summary>
            <param name="id">The session identifier</param>
            <returns>A list of all the different types of activities that are active during the given session determined by the id parameter</returns>
            <remarks>Queries the database to find the distinct activities type of activities that are active during the session desired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetActivityStatus(System.String,System.String)">
            <summary>
            Get the status (open or closed) of an activity for a given session
            </summary>
            <param name="sessionCode">The session code that we want to check the status for</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetOpenActivities">
            <summary>
            Get all the activities that have not yet been closed out for the current session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetOpenActivities(System.Int32)">
            <summary>
            Get all the activities that have not yet been closed out for the current session for 
            which a given user is the group admin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetClosedActivities">
            <summary>
            Get all the activities that are already closed out for the current session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.GetClosedActivities(System.Int32)">
            <summary>
            Get all the activities that are already closed out for the current session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.Put(System.String,Gordon360.Models.ACT_INFO)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.PostImage(System.String)">
            <summary>
            Set an image for the activity
            </summary>
            <param name="id">The activity Code</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.ResetImage(System.String)">
            <summary>
            Reset the activity Image
            </summary>
            <param name="id">The activity code</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.ActivitiesController.TogglePrivacy(System.String,System.Boolean)">
            <summary>Update an existing activity to be private or not</summary>
            <param name="id">The id of the activity</param>
            <param name = "p">the boolean value</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Get">
            <summary>
            Get all memberships
            </summary>
            <returns>
            A list of all memberships
            </returns>
            <remarks>
            Server makes call to the database and returns all current memberships
            </remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Get(System.Int32)">
            <summary>
            Get a single membership based on the id given
            </summary>
            <param name="id">The id of a membership within the database</param>
            <remarks>Queries the database about the specified membership</remarks>
            <returns>The information about one specific membership</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetMembershipsForActivity(System.String)">
            <summary>
            Get all the memberships associated with a given activity
            </summary>
            <param name="id">The activity ID</param>
            <returns>IHttpActionResult</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetGroupAdminForActivity(System.String)">
            <summary>
            Gets the group admin memberships associated with a given activity.
            </summary>
            <param name="id">The activity ID.</param>
            <returns>A list of all leader-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetLeadersForActivity(System.String)">
            <summary>
            Gets the leader-type memberships associated with a given activity.
            </summary>
            <param name="id">The activity ID.</param>
            <returns>A list of all leader-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetAdvisorsForActivity(System.String)">
            <summary>
            Gets the advisor-type memberships associated with a given activity.
            </summary>
            <param name="id">The activity ID.</param>
            <returns>A list of all advisor-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetActivityFollowersCount(System.String)">
            <summary>
            Gets the number of members and followers of an activity
            </summary>
            <param name="id">The activity ID.</param>
            <returns>The number of followers of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetActivityMembersCount(System.String)">
            <summary>
            Gets the number of members and followers of an activity
            </summary>
            <param name="id">The activity ID.</param>
            <returns>The number of members of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Post(Gordon360.Models.MEMBERSHIP)">
            <summary>Create a new membership item to be added to database</summary>
            <param name="membership">The membership item containing all required and relevant information</param>
            <returns></returns>
            <remarks>Posts a new membership to the server to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.GetMembershipsForStudent(System.String)">
            <summary>Fetch memberships that a specific student has been a part of</summary>
            <param name="id">The Student id</param>
            <returns>The membership information that the student is a part of</returns>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Put(System.Int32,Gordon360.Models.MEMBERSHIP)">
            <summary>Update an existing membership item</summary>
            <param name="id">The membership id of whichever one is to be changed</param>
            <param name="membership">The content within the membership that is to be changed and what it will change to</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.ToggleGroupAdmin(Gordon360.Models.MEMBERSHIP)">
            <summary>Update an existing membership item to be a group admin or not</summary>
             /// <param name="membership">The content within the membership that is to be changed</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.TogglePrivacy(System.Int32,System.Boolean)">
            <summary>Update an existing membership item to be private or not</summary>
            <param name="id">The id of the membership</param>
            <param name = "p">the boolean value</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.Api.MembershipsController.Delete(System.Int32)">
            <summary>Delete an existing membership</summary>
            <param name="id">The identifier for the membership to be deleted</param>
            <remarks>Calls the server to make a call and remove the given membership from the database</remarks>
        </member>
        <member name="F:Gordon360.Repositories.GenericRepository`1._context">
            <summary>
                The database context for the repository
            </summary>
        </member>
        <member name="F:Gordon360.Repositories.GenericRepository`1._dbSet">
            <summary>
                The data set of the repository
            </summary>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.#ctor(Gordon360.Models.CCTEntities1)">
            <summary>
                Initializes a new instance of the <see cref="T:Gordon360.Repositories.GenericRepository`1" /> class.
            </summary>
            <param name="context">The context for the repository</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetById(System.Int32)">
            <summary>
                Gets single entity by id
            </summary>
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetById(System.String)">
            <summary>
                Gets single entity by id
            </summary>
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetByUsername(System.String)">
            <summary>
            Gets single entity by username
            </summary>
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetAll">
            <summary>
                Gets all entities
            </summary>
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Gets all entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>All entities matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Set based on where condition
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The records matching the given condition</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Finds an entity matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Determines if there are any entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Returns the first entity that matches the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Returns the first entity that matches the predicate else null
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate else null</returns>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Add(`0)">
            <summary>
                Adds a given entity to the context
            </summary>
            <param name="entity">The entity to add to the context</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Delete(`0)">
            <summary>
                Deletes a given entity from the context
            </summary>
            <param name="entity">The entity to delete</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.Attach(`0)">
            <summary>
                Attaches a given entity to the context
            </summary>
            <param name="entity">The entity to attach</param>
        </member>
        <member name="M:Gordon360.Repositories.GenericRepository`1.ExecWithStoredProcedure(System.String,System.Object[])">
            <summary>
            Executes a stored procedure
            </summary>
            <param name="query">Name of the stored procedure </param>
            <param name="parameters">Parameters to pass to the stored procedure</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetById(System.Int32)">
            <summary>
            Gets entity by Id
            </summary>        
            <returns>Specific enitity</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetById(System.String)">
            <summary>
            Gets entity by Id
            </summary>        
            <returns>Specific enitity</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetByUsername(System.String)">
            <summary>
            Gets entity by username
            </summary>
            <returns>Specific entity</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetAll">
            <summary>
            Gets all entities
            </summary>        
            <returns>All entities</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets all entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>All entities matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Set based on where condition
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The records matching the given condition</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Finds an entity matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determines if there are any entities matching the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first entity that matches the predicate
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first entity that matches the predicate else null
            </summary>
            <param name="predicate">The filter clause</param>
            <returns>An entity matching the predicate else null</returns>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Add(`0)">
            <summary>
            Adds a given entity to the context
            </summary>
            <param name="entity">The entity to add to the context</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Delete(`0)">
            <summary>
            Deletes a given entity from the context
            </summary>
            <param name="entity">The entity to delete</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.DeleteCollection(`0,System.String,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Delete the child collection
            </summary>
            <param name="entity"></param>
            <param name="collectionName"></param>
            <param name="collectionToRemove"></param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.Attach(`0)">
            <summary>
            Attaches a given entity to the context
            </summary>
            <param name="entity">The entity to attach</param>
        </member>
        <member name="M:Gordon360.Repositories.IRepository`1.ExecWithStoredProcedure(System.String,System.Object[])">
            <summary>
            Executes a stored procedure
            </summary>
            <param name="query">Name of the stored procedure </param>
            <param name="parameters">Parameters to pass to the stored procedure</param>
        </member>
        <member name="T:Gordon360.Services.AccountService">
            <summary>
            Service Class that facilitates data transactions between the AccountsController and the Account database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AccountService.Get(System.String)">
            <summary>
            Fetches a single account record whose id matches the id provided as an argument
            </summary>
            <param name="id">The person's gordon id</param>
            <returns>AccountViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAll">
            <summary>
            Fetches all the account records from storage.
            </summary>
            <returns>AccountViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByEmail(System.String)">
            <summary>
            Fetches the account record with the specified email.
            </summary>
            <param name="email">The email address associated with the account.</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByUsername(System.String)">
            <summary>
            Fetches the account record with the specified username.
            </summary>
            <param name="username">The username associated with the account.</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.ActivityService">
            <summary>
            Service Class that facilitates data transactions between the ActivitiesController and the ACT_CLUB_DEF database model.
            ACT_INFO (ActivityInfo) and ACT_CLUB_DEF(Activity) are very similar. 
            ACT_INFO is basically a copy of the ACT_CLUB_DEF domain model but with extra fields that we want to store (activity image, blurb etc...)
            Activity Info and ACtivity may be talked about interchangeably.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ActivityService.Get(System.String)">
            <summary>
            Fetches a single activity record whose id matches the id provided as an argument
            </summary>
            <param name="id">The activity code</param>
            <returns>ActivityViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivitiesForSession(System.String)">
            <summary>
            Fetches the Activities that are active during the session whose code is specified as parameter.
            </summary>
            <param name="id">The session code</param>
            <returns>ActivityViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivityTypesForSession(System.String)">
            <summary>
            Fetches the Activity types of activities that are active during the session whose code is specified as parameter.
            </summary>
            <param name="id">The session code</param>
            <returns>ActivityViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetAll">
            <summary>
            Fetches all activity records from storage.
            </summary>
            <returns>ActivityViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.IsOpen(System.String,System.String)">
            <summary>
            Checks to see if a specified activity is still open for this session
            Note: the way we know that an activity is open or closed is by the column END_DTE in MEMBERSHIP table
            When an activity is closed out, the END_DTE is set to the date on which the closing happened
            Otherwise, the END_DTE for all memberships of the activity will be null for that session
            </summary>
            <param name="sessionCode">The activity code for the activity in question</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetOpenActivities(System.String)">
            <summary>
            Gets a collection of all the current open activities, by finding which activities have 
            memberships with an END_DTE that is null
            </summary>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetOpenActivities(System.String,System.Int32)">
            <summary>
            Gets a collection of all the current open activities for which a given user is group admin, by finding which activities have 
            memberships with an END_DTE that is null
            </summary>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetClosedActivities(System.String)">
            <summary>
            Gets a collection of all the current activitie already closed out, by finding which activities have 
            memberships with an END_DTE that is not null
            </summary>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetClosedActivities(System.String,System.Int32)">
            <summary>
            Gets a collection of all the current closed activities for which a given user is group admin, by finding which activities have 
            memberships with an END_DTE that is not null
            </summary>
            <param name="id">The user's id</param>
            <param name="sess_cde">The session we want to get the closed activities for</param>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.Update(System.String,Gordon360.Models.ACT_INFO)">
            <summary>
            Updates the Activity Info 
            </summary>
            <param name="activity">The activity info resource with the updated information</param>
            <param name="id">The id of the activity info to be updated</param>
            <returns>The updated activity info resource</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.CloseOutActivityForSession(System.String,System.String)">
            <summary>
            Closes out a specific activity for a specific session
            </summary>
            <param name="id">The activity code for the activity that will be closed</param>
            <param name="sess_cde">The session code for the session where the activity is being closed</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.OpenActivityForSession(System.String,System.String)">
            <summary>
            Open a specific activity for a specific session
            </summary>
            <param name="id">The activity code for the activity that will be closed</param>
            <param name="sess_cde">The session code for the session where the activity is being closed</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.UpdateActivityImage(System.String,System.String)">
            <summary>
            Sets the path for the activity image.
            </summary>
            <param name="id">The activity code</param>
            <param name="path"></param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.ResetActivityImage(System.String)">
            <summary>
            Reset the path for the activity image
            </summary>
            <param name="id">The activity code</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.TogglePrivacy(System.String,System.Boolean)">
            <summary>
            change activty privacy
            </summary>
            <param name="id">The activity code</param>
            <param name="p">activity private or not</param>
        </member>
        <member name="T:Gordon360.Services.AdministratorService">
            <summary>
            Service class to facilitate interacting with the Admin table.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Get(System.Int32)">
            <summary>
            Fetches the admin resource whose id is specified as an argument.
            </summary>
            <param name="id">The admin ID.l</param>
            <returns>The Specified administrator. If none was found, a null value is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Get(System.String)">
            <summary>
            Fetches the admin resource whose username matches the specified argument
            </summary>
            <param name="gordon_id">The administrator's gordon id</param>
            <returns>The Specified administrator. If none was found, a null value is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.GetAll">
            <summary>
            Fetches all the administrators from the database
            </summary>
            <returns>Returns a list of administrators. If no administrators were found, an empty list is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Add(Gordon360.Models.ADMIN)">
            <summary>
            Adds a new Administrator record to storage. Since we can't establish foreign key constraints and relationships on the database side,
            we do it here by using the validateAdmin() method.
            </summary>
            <param name="admin">The admin to be added</param>
            <returns>The newly added Admin object</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Delete(System.Int32)">
            <summary>
            Delete the admin whose id is specified by the parameter.
            </summary>
            <param name="id">The admin id</param>
            <returns>The admin that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.validateAdmin(Gordon360.Models.ADMIN)">
            <summary>
            Helper method to Validate an admin
            </summary>
            <param name="admin">The admin to validate</param>
            <returns>True if the admin is valid. Throws ResourceNotFoundException if not. Exception is cauth in an Exception Filter</returns>
        </member>
        <member name="T:Gordon360.Services.EventService">
            <summary>
            Service that allows for event control
            </summary>
        </member>
        <member name="M:Gordon360.Services.EventService.GetRoute(System.String,System.String)">
            <summary>
            Helper function to set the route we are making our request to in 25Live
            </summary>
            <param name="EventID"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetSpecificEvents(System.String,System.String)">
            <summary>
            Return a Single Event JObject from Live25
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetAllEvents(System.Xml.Linq.XDocument)">
            <summary>
            Access the memory stream created by the cached task and parse it into events
            </summary>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetAllForStudent(System.String)">
            <summary>
            Returns all attended events for a student
            </summary>
            <param name="user_name"> The student's ID</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetEventsForStudentByTerm(System.String,System.String)">
            <summary>
            Returns all attended events for a student in a specific term
            </summary>
            <param name="user_name"> The student's ID</param>
            <param name="term"> The current term</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.ComplexQueries.RawSqlQuery`1">
            <summary>
            Helper class to execute Sql statements.
            </summary>
            <typeparam name="T">The class to which the result will be bound</typeparam>
        </member>
        <member name="M:Gordon360.Services.ComplexQueries.RawSqlQuery`1.query(System.String,System.Object[])">
            <summary>
            Execute the sql query
            </summary>
            <param name="query">An sql statment. Can be a stored procedure or even a simple SELECT statment</param>
            <param name="parameters">Parameters to pass into the stored procedure</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.ContentManagementService">
            <summary>
            Service class that facilitates data (specifically, site content) passing between the ContentManagementController and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ContentManagementService.GetSliderContent">
            <summary>
            Fetches the dashboard slider content from the database.
            </summary>
            <returns>If found, returns a set of SliderViewModel's, based on each slide entry in the db. 
            If not returns an empty IEnumerable.</returns>
        </member>
        <member name="T:Gordon360.Services.EmailService">
            <summary>
            Service class to facilitate getting emails for members of an activity.
            </summary>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivity(System.String)">
            <summary>
            Get a list of the emails for all members in the activity during the current session.
            </summary>
            <param name="activity_code"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForGroupAdmin(System.String)">
            <summary>
            Get a list of emails for group admin in the activity during the current session.
            </summary>
            <param name="activity_code"></param>
            <returns>A collection of group admin emails</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForGroupAdmin(System.String,System.String)">
            <summary>
            Get a list of emails for group admin in the activity during a specified session.
            </summary>
            <param name="activity_code"></param>
            <param name="session_code"></param>
            <returns>A collection of the group admin emails</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityLeaders(System.String)">
            <summary>
            Get a list of emails for leaders in the activity during the current session.
            </summary>
            <param name="activity_code"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityAdvisors(System.String)">
            <summary>
            Get a list of emails for advisors in the activity during the current session.
            </summary>
            <param name="activity_code"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivity(System.String,System.String)">
            <summary>
            Get a list of the emails for all members in the activity during a specific session
            </summary>
            <param name="activity_code">The activity code</param>
            <param name="session_code">The session code</param>
            <returns>List of the emails for the members of this activity</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityLeaders(System.String,System.String)">
            <summary>
            Get a list of emails for leaders in the activity during a specified session
            </summary>
            <param name="activity_code">The activity code</param>
            <param name="session_code">The session code</param>
            <returns>List of emails for the leaders of this activity</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityAdvisors(System.String,System.String)">
            <summary>
            Get a list of emails for leaders in the activity during a specified session
            </summary>
            <param name="activity_code">The activity code</param>
            <param name="session_code">The session code</param>
            <returns>List of emails for the leaders of this activity</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetCustomUserInfo(System.String)">
            <summary>
            Fetches a single profile whose username matches the username provided as an argument
            </summary>
            <param name="username">The username</param>
            <returns>ProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateProfileImage(System.String,System.String,System.String)">
            <summary>
            Sets the path for the profile image.
            </summary>
            <param name="username">The username</param>
            <param name="path"></param>
            <param name="name"></param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateProfileLink(System.String,System.String,Gordon360.Models.CUSTOM_PROFILE)">
            <summary>
            Sets the path for the profile links.
            </summary>
            <param name="username">The username</param>
            <param name="type"></param>
            <param name="path"></param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateMobilePrivacy(System.String,System.Boolean)">
            <summary>
            privacy setting of mobile phone.
            </summary>
            <param name="username">The username</param>
            <param name="p"></param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateImagePrivacy(System.String,System.Int32)">
            <summary>
            privacy setting user profile photo.
            </summary>
            <param name="username">The username</param>
            <param name="p"></param>
        </member>
        <member name="T:Gordon360.Services.JenzibarActivityService">
            <summary>
            Service class to faclitate data transfers between in and out of the JNZB_ACTIVITIES table.
            This is a special class whose contents might not end up being exposed. The original idea 
            was for this class to represent all the memberships that would be moved to Jenzibar.
            We have not reached that point yet though.
            </summary>
        </member>
        <member name="T:Gordon360.Services.MembershipRequestService">
            <summary>
            Service class to facilitate data transactions between the MembershipRequestController and the database
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Add(Gordon360.Models.REQUEST)">
            <summary>
            Generate a new request to join an activity at a participation level higher than 'Guest'
            </summary>
            <param name="membershipRequest">The membership request object</param>
            <returns>The membership request object once it is added</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.ApproveRequest(System.Int32)">
            <summary>
            Approves the request with the specified ID.
            </summary>
            <param name="id">The ID of the request to be approved</param>
            <returns>The approved membership</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Delete(System.Int32)">
            <summary>
            Delete the membershipRequest object whose id is given in the parameters 
            </summary>
            <param name="id">The membership request id</param>
            <returns>A copy of the deleted membership request</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.DenyRequest(System.Int32)">
            <summary>
            Denies the membership request object whose id is given in the parameters
            </summary>
            <param name="id">The membership request id</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Get(System.Int32)">
            <summary>
            Get the membership request object whose Id is specified in the parameters.
            </summary>
            <param name="id">The membership request id</param>
            <returns>If found, returns MembershipRequestViewModel. If not found, returns null.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetAll">
            <summary>
            Fetches all the membership request objects from the database.
            </summary>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequestsForActivity(System.String)">
            <summary>
            Fetches all the membership requests associated with this activity
            </summary>
            <param name="id">The activity id</param>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequestsForStudent(System.String)">
            <summary>
            Fetches all the membership requests associated with this student
            </summary>
            <param name="id">The student id</param>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Update(System.Int32,Gordon360.Models.REQUEST)">
            <summary>
            Update an existing membership request object
            </summary>
            <param name="id">The membership request id</param>
            <param name="membershipRequest">The newly modified membership request</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.MembershipService">
            <summary>
            Service Class that facilitates data transactions between the MembershipsController and the Membership database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Add(Gordon360.Models.MEMBERSHIP)">
            <summary>
            Adds a new Membership record to storage. Since we can't establish foreign key constraints and relationships on the database side,
            we do it here by using the validateMembership() method.
            </summary>
            <param name="membership">The membership to be added</param>
            <returns>The newly added Membership object</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Delete(System.Int32)">
            <summary>
            Delete the membership whose id is specified by the parameter.
            </summary>
            <param name="id">The membership id</param>
            <returns>The membership that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Get(System.Int32)">
            <summary>
            Fetch the membership whose id is specified by the parameter
            </summary>
            <param name="id">The membership id</param>
            <returns>MembershipViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetAll">
            <summary>
            Fetches all membership records from storage.
            </summary>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetGroupAdminMembershipsForActivity(System.String)">
            <summary>
            Fetches the group admin (who have edit privileges of the page) of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetLeaderMembershipsForActivity(System.String)">
            <summary>
            Fetches the leaders of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetAdvisorMembershipsForActivity(System.String)">
            <summary>
            Fetches the advisors of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMembershipsForActivity(System.String)">
            <summary>
            Fetches the memberships associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMembershipsForStudent(System.String)">
            <summary>
            Fetches all the membership information linked to the student whose id appears as a parameter.
            </summary>
            <param name="id">The student id.</param>
            <returns>A MembershipViewModel IEnumerable. If nothing is found, an empty IEnumberable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetActivityFollowersCount(System.String)">
            <summary>
            Fetches the number of followers associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>int.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetActivityMembersCount(System.String)">
            <summary>
            Fetches the number of memberships associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="id">The activity code.</param>
            <returns>int.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Update(System.Int32,Gordon360.Models.MEMBERSHIP)">
            <summary>
            Updates the membership whose id is given as the first parameter to the contents of the second parameter.
            </summary>
            <param name="id">The membership id.</param>
            <param name="membership">The updated membership.</param>
            <returns>The newly modified membership.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.ToggleGroupAdmin(System.Int32,Gordon360.Models.MEMBERSHIP)">
            <summary>
            Switches the group-admin property of the person whose membership id is given
            </summary>
            <param name="id">The membership id.</param>
            <param name="membership">The corresponding membership object</param>
            <returns>The newly modified membership.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.TogglePrivacy(System.Int32,System.Boolean)">
            <summary>
            Switches the privacy property of the person whose membership id is given
            </summary>
            <param name="id">The membership id.</param>
            <param name="p">membership private or not</param>
            <returns>The newly modified membership.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.validateMembership(Gordon360.Models.MEMBERSHIP)">
            <summary>
            Helper method to Validate a membership
            </summary>
            <param name="membership">The membership to validate</param>
            <returns>True if the membership is valid. Throws ResourceNotFoundException if not. Exception is cauth in an Exception Filter</returns>
        </member>
        <member name="T:Gordon360.Services.ParticipationService">
            <summary>
            Service class that facilitates data passing between the ParticipationsController and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ParticipationService.Get(System.String)">
            <summary>
            Fetches the participation record whose id matches the given parameter.
            </summary>
            <param name="id">The participation id.</param>
            <returns>If found, returns ParticipationViewModel, if not returns null.</returns>
        </member>
        <member name="M:Gordon360.Services.ParticipationService.GetAll">
            <summary>
            Fetches all the participation records from the database
            </summary>
            <returns>Participation IEnumerable. If no records are found, returns an empty IEnumberable</returns>
        </member>
        <member name="T:Gordon360.Services.SessionService">
            <summary>
            Service class to facilitate data transactions between the Controller and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.SessionService.Get(System.String)">
            <summary>
            Get the session record whose sesssion code matches the parameter.
            </summary>
            <param name="id">The session code.</param>
            <returns>A SessionViewModel if found, null if not found.</returns>
        </member>
        <member name="M:Gordon360.Services.SessionService.GetAll">
            <summary>
            Fetches all the session records from the database.
            </summary>
            <returns>A SessionViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="T:Gordon360.Static.Data.Data">
            <summary>
            Service class for data that is shared between all services.
            </summary>
        </member>
        <member name="T:Gordon360.Static.Methods.Helpers">
            <summary>
            Service class for methods that are shared between all services.
            </summary>
        </member>
        <member name="M:Gordon360.Static.Methods.Helpers.GetCurrentSession">
            <summary>
            Service method that gets the current session we are in.
            </summary>
            <returns>SessionViewModel of the current session. If no session is found for our current date, returns null.</returns>
        </member>
        <member name="M:Gordon360.Static.Methods.Helpers.GetLiveStream(System.String)">
            <summary>
            Return an XDocument from a URL containing XML. 
            This is used to retrieve data from 25Live specifically.
            </summary>
            <param name="requestUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Static.Methods.Helpers.GetDay">
            <summary>
             Helper function to determine the current academic year
            </summary>
            <returns></returns>
        </member>
        <member name="F:Gordon360.Startup.DummyCacheItemKey">
            <summary>
            Caching task methods created using the article written by Omar Al Zabir
            Article: https://www.codeproject.com/Articles/12117/Simulate-a-Windows-Service-using-ASP-NET-to-run-sc
            </summary>
        </member>
    </members>
</doc>
