// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Gordon360.Models.StudentTimesheets;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Gordon360.Models.StudentTimesheets.Context
{
    public partial class StudentTimesheetsContext
    {
        private StudentTimesheetsContextProcedures _procedures;

        public virtual StudentTimesheetsContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new StudentTimesheetsContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public StudentTimesheetsContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<student_timesheets_already_worked_these_hoursResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<student_timesheets_edit_shift_already_worked_these_hoursResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<student_timesheets_select_active_status_shiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<student_timesheets_select_emls_for_ajax_selectboxResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<student_timesheets_select_end_datetimesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<student_timesheets_select_fixed_status_shiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<student_timesheets_select_if_student_has_paid_shiftsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<student_timesheets_select_supervisor_nameResult>().HasNoKey().ToView(null);
        }
    }

    public interface IStudentTimesheetsContextProcedures
    {
        Task<List<student_timesheets_already_worked_these_hoursResult>> student_timesheets_already_worked_these_hoursAsync(int? ID_NUM, DateTime? shift_start_datetime, DateTime? shift_end_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> student_timesheets_delete_shiftAsync(int? row_num, int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<student_timesheets_edit_shift_already_worked_these_hoursResult>> student_timesheets_edit_shift_already_worked_these_hoursAsync(int? ID_NUM, DateTime? shift_start_datetime, DateTime? shift_end_datetime, int? shift_being_edited, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> student_timesheets_insert_shiftAsync(int? ID_NUM, int? eml, DateTime? shift_start_datetime, DateTime? shift_end_datetime, string hours_worked, string shift_notes, string last_changed_by, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<student_timesheets_select_active_status_shiftsResult>> student_timesheets_select_active_status_shiftsAsync(int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<student_timesheets_select_emls_for_ajax_selectboxResult>> student_timesheets_select_emls_for_ajax_selectboxAsync(DateTime? start_datetime, DateTime? end_datetime, int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<student_timesheets_select_end_datetimesResult>> student_timesheets_select_end_datetimesAsync(int? eml, int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<student_timesheets_select_fixed_status_shiftsResult>> student_timesheets_select_fixed_status_shiftsAsync(int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<student_timesheets_select_if_student_has_paid_shiftsResult>> student_timesheets_select_if_student_has_paid_shiftsAsync(int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<student_timesheets_select_supervisor_nameResult>> student_timesheets_select_supervisor_nameAsync(int? supervisor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> student_timesheets_submit_job_shiftAsync(int? ID_NUM, int? eml, DateTime? shift_end_datetime, int? submitted_to, string last_changed_by, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
    }

    public partial class StudentTimesheetsContextProcedures : IStudentTimesheetsContextProcedures
    {
        private readonly StudentTimesheetsContext _context;

        public StudentTimesheetsContextProcedures(StudentTimesheetsContext context)
        {
            _context = context;
        }

        public virtual async Task<List<student_timesheets_already_worked_these_hoursResult>> student_timesheets_already_worked_these_hoursAsync(int? ID_NUM, DateTime? shift_start_datetime, DateTime? shift_end_datetime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "shift_start_datetime",
                    Value = shift_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "shift_end_datetime",
                    Value = shift_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_already_worked_these_hoursResult>("EXEC @returnValue = [dbo].[student_timesheets_already_worked_these_hours] @ID_NUM, @shift_start_datetime, @shift_end_datetime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> student_timesheets_delete_shiftAsync(int? row_num, int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "row_num",
                    Value = row_num ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[student_timesheets_delete_shift] @row_num, @ID_NUM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<student_timesheets_edit_shift_already_worked_these_hoursResult>> student_timesheets_edit_shift_already_worked_these_hoursAsync(int? ID_NUM, DateTime? shift_start_datetime, DateTime? shift_end_datetime, int? shift_being_edited, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "shift_start_datetime",
                    Value = shift_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "shift_end_datetime",
                    Value = shift_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "shift_being_edited",
                    Value = shift_being_edited ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_edit_shift_already_worked_these_hoursResult>("EXEC @returnValue = [dbo].[student_timesheets_edit_shift_already_worked_these_hours] @ID_NUM, @shift_start_datetime, @shift_end_datetime, @shift_being_edited", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> student_timesheets_insert_shiftAsync(int? ID_NUM, int? eml, DateTime? shift_start_datetime, DateTime? shift_end_datetime, string hours_worked, string shift_notes, string last_changed_by, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "eml",
                    Value = eml ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "shift_start_datetime",
                    Value = shift_start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "shift_end_datetime",
                    Value = shift_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "hours_worked",
                    Size = 10,
                    Value = hours_worked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "shift_notes",
                    Size = -1,
                    Value = shift_notes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last_changed_by",
                    Size = 50,
                    Value = last_changed_by ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[student_timesheets_insert_shift] @ID_NUM, @eml, @shift_start_datetime, @shift_end_datetime, @hours_worked, @shift_notes, @last_changed_by", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<student_timesheets_select_active_status_shiftsResult>> student_timesheets_select_active_status_shiftsAsync(int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_select_active_status_shiftsResult>("EXEC @returnValue = [dbo].[student_timesheets_select_active_status_shifts] @ID_NUM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<student_timesheets_select_emls_for_ajax_selectboxResult>> student_timesheets_select_emls_for_ajax_selectboxAsync(DateTime? start_datetime, DateTime? end_datetime, int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "start_datetime",
                    Value = start_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "end_datetime",
                    Value = end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_select_emls_for_ajax_selectboxResult>("EXEC @returnValue = [dbo].[student_timesheets_select_emls_for_ajax_selectbox] @start_datetime, @end_datetime, @ID_NUM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<student_timesheets_select_end_datetimesResult>> student_timesheets_select_end_datetimesAsync(int? eml, int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "eml",
                    Value = eml ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_select_end_datetimesResult>("EXEC @returnValue = [dbo].[student_timesheets_select_end_datetimes] @eml, @ID_NUM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<student_timesheets_select_fixed_status_shiftsResult>> student_timesheets_select_fixed_status_shiftsAsync(int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_select_fixed_status_shiftsResult>("EXEC @returnValue = [dbo].[student_timesheets_select_fixed_status_shifts] @ID_NUM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<student_timesheets_select_if_student_has_paid_shiftsResult>> student_timesheets_select_if_student_has_paid_shiftsAsync(int? ID_NUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_select_if_student_has_paid_shiftsResult>("EXEC @returnValue = [dbo].[student_timesheets_select_if_student_has_paid_shifts] @ID_NUM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<student_timesheets_select_supervisor_nameResult>> student_timesheets_select_supervisor_nameAsync(int? supervisor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "supervisor",
                    Value = supervisor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<student_timesheets_select_supervisor_nameResult>("EXEC @returnValue = [dbo].[student_timesheets_select_supervisor_name] @supervisor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> student_timesheets_submit_job_shiftAsync(int? ID_NUM, int? eml, DateTime? shift_end_datetime, int? submitted_to, string last_changed_by, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NUM",
                    Value = ID_NUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "eml",
                    Value = eml ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "shift_end_datetime",
                    Value = shift_end_datetime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "submitted_to",
                    Value = submitted_to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "last_changed_by",
                    Size = 50,
                    Value = last_changed_by ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[student_timesheets_submit_job_shift] @ID_NUM, @eml, @shift_end_datetime, @submitted_to, @last_changed_by", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
