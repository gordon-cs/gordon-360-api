import pytest
import warnings
import string
from pytest_components import requests
from datetime import datetime

import credentials
import pytest_components as api


# # # # # # # # #
# Configuration #
# # # # # # # # #

# Membership
# Activity to use for testing
activity_code_AJG = 'AJG'
activity_code_360 = '360'
# Description to use for testing
activity_description_AJG = 'A. J. Gordon Scholars Program'
activity_description_360 = '360.gordon.edu'
# Image path to use for testing
activity_image_path_AJG = \
    'https://360apitrain.gordon.edu/browseable/uploads/AJG/canvasImage.png'
activity_image_path_360 = \
    'https://360apitrain.gordon.edu/browseable/uploads/360/canvasImage.png'
# Blurb to use for testing
activity_blurb_AJG = 'DOING TESTS, IGNORE'
activity_blurb_360 = 'This is me changing the description'
# URL to use for testing
activity_URL_AJG = 'http://www.lolcats.com/'
activity_URL_360 = 'http://360.gordon.edu'
# Type to use for testing
activity_type_AJG = 'LEA'
activity_type_360 = 'STU'
# Type description to use for testing
activity_type_description_AJG = 'Leadership Program'
activity_type_description_360 = 'Student Life'
# Join info to use for testing
activity_join_info_AJG = ''
activity_join_info_360 = 'me adding special information'
# Id number to use for testing
valid_id_number = 50146557
# Session to use for testing
session_code = '201809'
# Specific term to use for testing
term_code = 'FA18'
# Participation Code that correspond to member:
member_positions = ['MEMBR', 'GUEST', 'PART']
# Date
begin_date = '06/10/2016'
end_date = '07/16/2016'

_email = '360.studenttest@gordon.edu'
# Comments
comments = 'Generated by 360-Gordon-Test. IGNORE'
# comments = 'Generated by Gordon 360 API Test Suite. IGNORE'
searchString = 'michael'
searchString2 = 'lindsay'
# Event or Type ID used for events testing
Event_OR_Type_ID = '10'

# Profile image path
FILE_PATH_PROFILE = r'..\..\Gordon360\browseable\profile\Default\profile.png'
FILE_PATH_ID = r'..\..\Gordon360\browseable\profile\Default\ID.png'

# API. Choose only 1. 
# localhost set up using Visual Studio to enable local testing.
hostURL = 'https://360ApiTrain.gordon.edu/'
#hostURL = 'http://localhost:1235/'

# Constants
LEADERSHIP_POSITIONS = ['CAPT','CODIR','CORD','DIREC','PRES','VICEC','VICEP']
REQUEST_STATUS_APPROVED = 'Approved'
REQUEST_STATUS_DENIED = 'Denied'
REQUEST_STATUS_PENDING = 'Pending'
AUTHORIZATION_DENIED = 'Authorization has been denied for this request.'

# Configuration Details
username = credentials.username
password = credentials.password
my_id_number = credentials.id_number
grant_payload = \
    { 'username':username, 'password':password, 'grant_type':'password' }

leader_username = credentials.username_activity_leader
leader_password = credentials.password_activity_leader
leader_id_number = credentials.id_number_activity_leader
leader_grant_payload = { 'username':leader_username, \
    'password':leader_password, 'grant_type':'password' }

# Global variables for myschedule test events
event_id = '10000'
location = 'KOSC 244'
description = 'Summer Practicum'
begintime = '09:00:00'
endtime = '17:00:00'

# Global variable for new description for test events
put_description = 'DOING TESTS - IGNORE'
shortened_begintime = '09:00:00'
shortened_endtime = '17:00:00'

# Pre-conditions.
# Statically disabled/enabled tests that have yet to be resolved.
cctService = False
enrolledInPracticum = False
unknownPrecondition = False


# Logins
class testCase:

    # Create an authorized session to test authorized calls.
    def createAuthorizedSession(self, userLogin, userPassword):
        r = requests.post(hostURL+'token', { 'username':userLogin, \
            'password':userPassword, 'grant_type':'password' })
        access_token = r.json()["access_token"]
        authorization_header = "Bearer " + access_token
        authorized_session = requests.Session()
        authorized_session.verify = True
        authorized_session.headers.update({ \
            "Authorization":authorization_header })
        return authorized_session

    # Create a guest session to test guest calls.
    def createGuestSession(self):
        authorized_session = requests.Session()
        return authorized_session
